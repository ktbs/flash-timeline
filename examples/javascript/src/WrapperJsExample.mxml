<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:tl="com.ithaca.timeline.*"
               xmlns:root="*"
               width="100%"  height="100%"
               preinitialize="onPreinitialize()"
               creationComplete="init()" >

    <fx:Script>
    <![CDATA[
        import com.ithaca.timeline.events.TimelineEvent;
        import com.ithaca.timeline.Timeline;
        import com.ithaca.timeline.TraceLineGroup;
        import com.ithaca.timeline.Layout;
        import com.ithaca.timeline.Stylesheet;
        import com.ithaca.traces.Trace;
        import flash.events.Event;
        import flash.events.TimerEvent;
        import flash.external.ExternalInterface;
        import flash.net.URLLoader;
        import flash.utils.Timer;
        import gnu.as3.gettext._FxGettext;
        import gnu.as3.gettext.FxGettext;
        import gnu.as3.gettext.ISO_3166;
        import gnu.as3.gettext.ISO_639_1;
        import gnu.as3.gettext.Locale;
        import gnu.as3.gettext.services.IGettextService;
        import gnu.as3.gettext.services.URLLoaderService;
        import mx.formatters.DateFormatter;

        /*
         * This example creates a basic wrapper for Javascript.
         *
         * The Timeline is the only created component.
         * Then it can be used for HTML integration.
         */

        /************************************
         * JAVASCRIPT --->  FLEX
         *
         * Definition of the functions that could be called from Javascript.
         * It is called when receive the creationComplete event.
         ************************************/
        public function initExternalInterface():void
        {
            flash.system.Security.allowDomain("~~")
            flash.system.Security.allowInsecureDomain("~~")

            if (ExternalInterface.available)
            {
                 ExternalInterface.addCallback("loadTTL", loadTTL);
                 ExternalInterface.addCallback("onPlay", onPlay);
                 ExternalInterface.addCallback("onPause", onPause);
                 ExternalInterface.addCallback("loadLayout", loadLayout);
                 ExternalInterface.addCallback("saveLayout", timeline.timelineLayout.getCurrentXmlLayout);
            }
        }

        /************************************
         * FLEX ---> JAVASCRIPT
         *
         * Example of calling a Javascript function from Flex.
         */
        private function updateTimer(event: TimelineEvent): void
        {
            var df: DateFormatter = new DateFormatter();
            df.formatString = "JJ:NN:SS.QQ";
            var string: String = df.format(new Date(timeline.currentTime));

            // Calling the javascript function: function updateTimer( string)
            ExternalInterface.call("updateTimer", string);
        }

        /* ************************************ */
        /* End of the Javascript specific code  */
        /* ************************************ */

        [Bindable]
        private var fxgt: _FxGettext;

        private var timer             : Timer;
        private var timeValue         : Number = 0;
        private var statusBarTimer    : Timer = new Timer(4000, 1);
        public  var firstload         : Boolean = true;

        [Embed(source="images/unknown.jpg")]
        public var tlgIcon: Class;

        private function onPreinitialize(): void
        {
            fxgt = FxGettext;
            setlocale(Locale.LC_MESSAGES, mklocale(ISO_639_1.FR, ISO_3166.FR));
            var service: IGettextService = new URLLoaderService("..");
            service.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
            fxgt.bindtextdomain("timeline", null, service);
            fxgt.textdomain("timeline");
            statusBarTimer.addEventListener(TimerEvent.TIMER, function(): void {
                hideStatus.end();
                hideStatus.play();
            });
        }

        public function statusMessage(msg: String = "", color: String = null): void
        {
            // FIXME: allow to pass a javascript callback method for sending error messages
            if (color === null)
                color = '#ffff60';
            if (msg != "")
            {
                statusBar.visible = true;
                statusBar.setStyle('backgroundColor', color);
                statusBar.text = msg;

                showStatus.end();
                showStatus.play();
                statusBarTimer.reset();
                statusBarTimer.start();
            }
        }

        private function onIOError(event: IOErrorEvent): void
        {
            trace(event);
            statusMessage("Error: " + event.text, "#ffcccc");
        }

        protected function init(): void
        {
            if ("layout" in this.parameters)
            {
                loadLayout(this.parameters["layout"]);
            }
            if ("ttl" in this.parameters)
            {
                loadTTL(this.parameters["ttl"]);
            }
            initExternalInterface();
        }

        public function onRulerClick(e: TimelineEvent): void
        {
            timeValue = e.value;
            timeline.currentTime = timeValue;
        }

        protected function loadLayout(layoutFilename: String): void
        {
            var loader: URLLoader = new URLLoader();

            loader.addEventListener(Event.COMPLETE, onLoadLayoutComplete);
            loader.addEventListener(IOErrorEvent.IO_ERROR, onLoadLayoutError);
            loader.load(new URLRequest(layoutFilename));

            loading.visible = true;
            loading.label = "Loading Layout...";
        }

        private function onLoadLayoutError(event: IOErrorEvent): void
        {
            loading.visible = false;
            statusMessage("Error when loading layout: " + event.text, "#ffcccc");
            // Error while loading layout. Use a default one.
            timeline.layoutXML = <root> <layout> <tlg> <tl title="All"> <modifier splitter="type" /> </tl> </tlg> </layout> </root> ;
            timeline.timelineLayout = new Layout(timeline);
        }

        private function onLoadLayoutComplete(event: Event): void
        {
            loading.visible = false;

            //we init the trace object
            var loader: URLLoader   = event.target as URLLoader;
            timeline.layoutXML      = new XML(loader.data);
            timeline.timelineLayout = new Layout(timeline);
        }

        public function loadTTL(url: String): void
        {
            var loader: URLLoader = new URLLoader();

            loader.dataFormat=URLLoaderDataFormat.BINARY;
            loader.addEventListener(Event.COMPLETE, onLoadTTLComplete);
            loader.addEventListener(IOErrorEvent.IO_ERROR, onTTLioError);
            loader.load(new URLRequest(url));

            loading.visible = true;
            loading.label = "Loading TTL...";
        }

        private function onLoadTTLComplete(event: Event):void
        {
            loading.visible = false;

            //we init the trace object
            var loader: URLLoader = event.target as URLLoader;
            var trace_ttl: String = loader.data;

            var theTrace: Trace = new Trace();
            theTrace.autosync = false;

            loading.visible = true;
            loading.label = "TTL to trace...";
            theTrace.updateFromRDF(trace_ttl);

            loading.label = "Adding Trace...";
            var tlg: TraceLineGroup = timeline.addTrace(theTrace);
            tlg.setStyle("title", theTrace.uri.toUpperCase());
            tlg.setStyle("bgColor", Stylesheet.getTracelineGroupColor(tlg));
            tlg.setStyle("icon", tlgIcon);

            loading.visible = false;
        }

        private function onTTLioError(event: IOErrorEvent): void
        {
            statusMessage("Error when loading TTL: " + event.text, "#ffcccc");
            loading.visible = false;
        }

        private function startTimer(): void
        {
            if (!timer)
            {
                timer = new Timer(100);
                timeValue = timeline.zoomContext._timelineRange.begin;
                timer.addEventListener(TimerEvent.TIMER, updateCursorPosition);
            }
            timer.start();
        }

        private function stopTimer(): void
        {
            timer.stop();
        }

        public function updateCursorPosition(event: TimerEvent): void
        {
            var timer: Timer = event.currentTarget as Timer;
            timeValue += timer.delay*60;

            timeline.currentTime = timeValue;
        }

        private function onPlay(event: Event = null): void
        {
            timeline.isPlaying = true;
            startTimer();
        }

        private function onPause(event: Event = null): void
        {
            timeline.isPlaying = false;
            stopTimer();
        }

    ]]> </fx:Script>

    <fx:Style source="default.css" />

    <fx:Declarations>
        <s:Fade id="showStatus" 
            target="{statusBar}"
            alphaFrom="0"
            alphaTo="100"/>

        <s:Fade id="hideStatus" 
            target="{statusBar}"
            alphaFrom="100"
            alphaTo="0"/>

    </fx:Declarations>

    <s:VGroup  width="100%" height="100%" left="10" right="10" top="10" bottom="10" gap="20">

        <s:Label id="statusBar" width="100%" height="30" visible="false" backgroundColor="0xffff60" color="0x0" fontWeight="bold" textAlign="center" verticalAlign="middle" text="Application started" />
    
        <tl:Timeline id="timeline" width="100%" height="50%" playButtonClick="startTimer()"
                     pauseButtonClick="stopTimer()" timeRulerClick="onRulerClick(event)"
                     cursorMode="auto"
                     endAlertBeforeTime="30000"
                     showPlayButton="true"
                     currentTimeChange="updateTimer(event)" />
    </s:VGroup>

    <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
        <mx:ProgressBar id="loading"  horizontalCenter="true" verticalCenter="true" label="Loading..."  labelPlacement="center" indeterminate="true" visible="false" />
    </mx:Box>

</s:Application>
