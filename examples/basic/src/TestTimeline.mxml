<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:tl="com.ithaca.timeline.*"
               xmlns:root="*"
               xmlns:kapit="fr.kapit.*"
               width="100%"  height="100%"
               preinitialize="onPreinitialize()"
               creationComplete="init()" >

    <fx:Script>
    <![CDATA[
        import com.ithaca.timeline.Layout;
        import com.ithaca.timeline.ObselSkin;
        import com.ithaca.timeline.skins.TimelineSkin;
        import com.ithaca.timeline.ISelector;
        import com.ithaca.timeline.LayoutModifier;
        import com.ithaca.timeline.LayoutNode;
        import com.ithaca.timeline.Timeline;
        import com.ithaca.timeline.TraceLine;
        import com.ithaca.timeline.TraceLineGroup;
        import com.ithaca.timeline.SelectorRegexp;
        import com.ithaca.timeline.Stylesheet;
        import com.ithaca.timeline.events.TimelineEvent;
        import com.ithaca.timeline.TraceLineGroupTitle;
        import com.ithaca.timeline.TraceLineTitle;
        import com.ithaca.traces.Obsel;
        import com.ithaca.traces.Trace;
        import com.ithaca.traces.events.TraceEvent;
        import com.ithaca.traces.TraceManager;
        import com.ithaca.tales.Context;
        import com.ithaca.tales.TALESUtil;
        import com.ithaca.tales.PathNotFoundException;
        import spark.events.ElementExistenceEvent;

        import flash.events.Event;
        import flash.net.FileReference;
        import flash.display.StageScaleMode;
        import flash.display.StageAlign;
        import flash.events.Event;
        import mx.events.ListEvent;
        import mx.formatters.DateFormatter;
        import mx.collections.ArrayCollection;
        import mx.collections.XMLListCollection;
        import mx.styles.StyleManager;
        import mx.logging.Log;
        import mx.logging.targets.TraceTarget;
        import mx.utils.StringUtil;

        import gnu.as3.gettext._FxGettext;
        import gnu.as3.gettext.FxGettext;
        import gnu.as3.gettext.Locale;
        import gnu.as3.gettext.ISO_639_1;
        import gnu.as3.gettext.ISO_3166;
        import gnu.as3.gettext.services.IGettextService;
        import gnu.as3.gettext.services.URLLoaderService;

        [Bindable]
        private var fxgt:_FxGettext;

        import flash.utils.Timer;

        /* Timer used for play/pause emulation */
        private var timer            : Timer;
        private var timeValue        : Number = 0;
        public  var firstload : Boolean = true;

        private var statusBarTimer    : Timer = new Timer(4000, 1);

        public var activityTimeline: Timeline = null;

        /* Last selected event in the table view */
        public var currentObsel: Obsel = null;
        /* Last selected tlg/tl */
        public var currentTLG: TraceLineGroup = null;
        public var currentTraceLine: TraceLine = null;

        [Embed(source="images/unknown.jpg")]
        public var tlgIcon: Class;

        private function onPreinitialize(): void
        {
            fxgt = FxGettext;
            // we set the locale for the messages category to fr_FR
            //setlocale(Locale.LC_MESSAGES, mklocale(ISO_639_1.FR,ISO_3166.FR));
            var service: IGettextService = new URLLoaderService("..");
            //service.addEventListener(Event.COMPLETE, onServiceComplete);
            service.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
            // You can listen to this event, but it is not required in
            // MXML files: the labels are automatically updated at startup
            // and when the locale changes
            //fxgt.addEventListener(Event.COMPLETE, onComplete);
            // Binds the messages of the helloword domain to the
            // default directory (locale)
            fxgt.bindtextdomain("timeline", null, service);
            // We select helloworld to be the default domain.
            fxgt.textdomain("timeline");
            Log.addTarget(new TraceTarget());
            statusBarTimer.addEventListener(TimerEvent.TIMER, function(): void {
                hideStatus.end();
                hideStatus.play();
            });
        }

        public function statusMessage(msg: String = "", color: String = null): void
        {
            if (color === null)
                color = '#ffff60';
            if (msg != "")
            {
                statusBar.visible = true;
                statusBar.setStyle('backgroundColor', color);
                statusBar.text = msg.replace("\n", "  ");

                showStatus.end();
                showStatus.play();
                statusBarTimer.reset();
                statusBarTimer.start();
            }
        }

        private function onIOError(event: IOErrorEvent): void
        {
            // an error occured while loading the catalog
            // it probably means there is no translations for this locale
            // or the base path to the translations is incorrect.
            trace(event);
            statusMessage("Error: " + event.text, "#ffcccc");
        }

        protected function init(): void
        {
            if ("layout" in this.parameters)
            {
                layout_ti.text = this.parameters["layout"];
                loadLayout(this.parameters["layout"]);
            }
            else
            {
                loadLayout(layout_ti.text);
            }
            if ("ttl" in this.parameters)
            {
                urlTTL_ti.text = this.parameters["ttl"];
                loadTTL(this.parameters["ttl"]);
            }
            allTestLayout.enabled = true;
            timeline.addEventListener(TimelineEvent.LAYOUT_NODE_ADDED, onAddLayoutNode);
        }

        public function onAddLayoutNode(e: TimelineEvent): void
        {
            if (e.value is TraceLine)
                (e.value as TraceLine).titleComponent.addEventListener(MouseEvent.MOUSE_DOWN, onSelect, true);
            else if (e.value is TraceLineGroup)
                (e.value as TraceLineGroup).titleComponent.addEventListener(MouseEvent.MOUSE_DOWN, onSelect,true);
        }


        public function onSelect(e: MouseEvent): void
        {
            if (e.currentTarget is TraceLineTitle)
            {
                dg_label.text = (e.currentTarget as TraceLineTitle).tl.title + " : " + (e.currentTarget as TraceLineTitle).tl._obsels.length + " obsels";
                obselList_dg.dataProvider = (e.currentTarget as TraceLineTitle).tl._obsels;
                this.currentTraceLine = (e.currentTarget as TraceLineTitle).tl;
                this.currentTLG = this.currentTraceLine.getTraceLineGroup();
            }
            else if (e.currentTarget is TraceLineGroupTitle)
            {
                dg_label.text = (e.currentTarget as TraceLineGroupTitle).tlg.title + " : " + (e.currentTarget as TraceLineGroupTitle).tlg.trace.obsels.length + " obsels";
                obselList_dg.dataProvider = (e.currentTarget as TraceLineGroupTitle).tlg.trace.obsels;
                this.currentTLG = (e.currentTarget as TraceLineGroupTitle).tlg;
                this.currentTraceLine = null;
            }
        }

        public function onNewTl(e: TimelineEvent): void
        {
            //(e.value.traceline as TraceLine).title = "new title"
        }


        public function onRulerClick(e: TimelineEvent): void
        {
            var df: DateFormatter = new DateFormatter();
            df.formatString = "JJ:NN:SS.QQ";
            trace(df.format(new Date(e.value)));
            timeValue = e.value;
            timeline.currentTime = timeValue;
        }

        protected function browse(event: MouseEvent): void
        {
            var myFileReference: FileReference = new FileReference();

            myFileReference.addEventListener(Event.SELECT, selectHandler);
            myFileReference.browse();
        }
        private function selectHandler(event: Event): void {
            var file: FileReference = FileReference(event.target);

            urlTTL_ti.text = "trace/" + file.name;
        }

        protected function loadLayout(layoutFilename: String): void
        {
            var loader: URLLoader=new URLLoader();

            loader.addEventListener(Event.COMPLETE, onLoadLayoutComplete);
            loader.addEventListener(IOErrorEvent.IO_ERROR, onLoadLayoutError);
            loader.load(new URLRequest(layoutFilename));

            loading.visible = true;
            loading.label = "Loading Layout...";
        }

        protected function saveLayout(): void
        {
            var myFileReference: FileReference = new FileReference();

            myFileReference.save(timeline.timelineLayout.getCurrentXmlLayout(), "save.xml");
        }

        private function onLoadLayoutComplete(event: Event): void
        {
            loading.visible = false;

            //we init the trace object
            var loader: URLLoader=event.target as URLLoader;
            timeline.layoutXML         = new XML(loader.data);
            timeline.timelineLayout = new Layout(timeline);

            if (firstload)
            {
                if (timeline.activity !== null)
                {
                    var tlg: TraceLineGroup = timeline.addTrace(timeline.activity, 0, "timeline");
                    tlg.setStyle("title", "Timeline");
                    /* Assume a default session time of n minutes, so that the initial display is meaningful */
                    timeline.range.addTime(tlg.traceBegin, tlg.traceEnd + 5 * 60 * 1000);
                }
                firstload = false;
            }
        }

        private function onLoadLayoutError(event: IOErrorEvent): void
        {
            loading.visible = false;
            statusMessage("Error when loading layout: " + event.text, "#ffcccc");
            // Error while loading layout. Use a default one.
            timeline.layoutXML         = <root> <layout> <tlg /> </layout> </root> ;
            timeline.timelineLayout = new Layout(timeline);
        }

        protected function loadTTL(url: String): void
        {
            var loader: URLLoader = new URLLoader();

            loader.dataFormat=URLLoaderDataFormat.BINARY;
            loader.addEventListener(Event.COMPLETE, onLoadTTLComplete);
            loader.addEventListener(IOErrorEvent.IO_ERROR, onTTLioError);
            loader.load(new URLRequest(url));

            loading.visible = true;
            loading.label = "Loading TTL...";
        }

        private function onTTLioError(event: IOErrorEvent): void
        {
            statusMessage("Error when loading TTL: " + event.text, "#ffcccc");
            loading.visible = false;
        }

        protected function ownTrace(): void
        {
            if (timeline.activity === null)
                timeline.startActivityTracing();

            if (activityTimeline === null)
            {
                /* Add a new Timeline to the Navigator */
                var content: spark.components.NavigatorContent = new spark.components.NavigatorContent();
                content.label = "Timeline activity";
                activityTimeline = new Timeline();
                activityTimeline.percentWidth = 100;
                activityTimeline.percentHeight = 100;
                activityTimeline.setStyle("timeMode", "relative");
                activityTimeline.setStyle("cursorMode", "manual");
                activityTimeline.setStyle("adminMode", true);
                activityTimeline.setStyle("showPlayButton", false);
                activityTimeline.addEventListener(TimelineEvent.LAYOUT_NODE_ADDED, onAddLayoutNode);
                content.addElement(activityTimeline);
                tabnavigator.addElement(content);
            }

            var tlg: TraceLineGroup = activityTimeline.addTrace(timeline.activity, 0, "timeline");
            tlg.setStyle("title", "Timeline");
            /* Assume a default session time of n minutes, so that the initial display is meaningful */
            activityTimeline.range.addTime(tlg.traceBegin, tlg.traceEnd + 5 * 60 * 1000, false);
        }

        private function onLoadTTLComplete(event: Event): void
        {
            loading.visible = false;

            //we init the trace object
            var loader: URLLoader = event.target as URLLoader;
            var trace_ttl: String = loader.data;

            var theTrace: Trace = new Trace(421, urlTTL_ti.text); //Dirty
            theTrace.autosync = false;

            loading.visible = true;
            loading.label = "TTL to trace...";
            trace("TTL File loaded");
            /* Setup event listeners before calling updateFromRDF: for
             * small files, the events will be fired quickly */
            theTrace.addEventListener(TraceEvent.PARSING_PROGRESS, TTLParsingProgress);
            theTrace.addEventListener(TraceEvent.PARSING_DONE, TTLParsingDone);
            trace("Parsing file");
            if (! theTrace.updateFromRDF(trace_ttl))
            {
                theTrace.removeEventListener(TraceEvent.PARSING_PROGRESS, TTLParsingProgress);
                theTrace.removeEventListener(TraceEvent.PARSING_DONE, TTLParsingDone);
            }
        }
        
        private function TTLParsingProgress(event: TraceEvent): void
        {
            trace("Parsing progress ", event.value, " ", event.message);
            loading.label = event.message;
            loading.setProgress((event.value as Number) * 1000, 1000);
        }

        private function TTLParsingDone(event: TraceEvent): void
        {
            var theTrace: Trace = event.currentTarget as Trace;

            theTrace.removeEventListener(TraceEvent.PARSING_PROGRESS, TTLParsingProgress);
            theTrace.removeEventListener(TraceEvent.PARSING_DONE, TTLParsingDone);

            loading.label = "Adding Trace...";
            var tlg: TraceLineGroup = timeline.addTrace(theTrace);
            timeline.makeTracelineGroupVisible(tlg, false);
            tlg.setStyle("title", theTrace.uri.toUpperCase());
            tlg.setStyle("bgColor", Stylesheet.getTracelineGroupColor(tlg));
            tlg.setStyle("icon", tlgIcon);

            timeline.zoomContext.reset();
            statusMessage("Loaded trace with " + theTrace.obsels.length + " obsels");

            loading.visible = false;
        }

        private function activityObselsToDurative(theTrace: Trace): void
        {
            var activityStart: Obsel = null;
            for each (var obsel: Obsel in theTrace.obsels)
            {
                if (obsel.type == "ActivityStart" || obsel.type == "ActivityStop" )
                {
                    if (activityStart)
                        activityStart.end = obsel.begin;

                    if (obsel.type == "ActivityStart")
                        activityStart = obsel;
                    else
                        activityStart = null;
                }
            }
        }
        private function toDate(item: Object, column: DataGridColumn): String
        {
            var df: DateFormatter = new DateFormatter();
            df.formatString = "JJ:NN:SS.QQ";
            var n: Number = item[column.dataField]
            var string: String = df.format(new Date (n));
            return string;
        }

        private function startTimer(event: TimelineEvent): void
        {
            if (!timer)
            {
                timer = new Timer(100);
                timeValue = timeline.zoomContext._timelineRange.begin;
                timer.addEventListener(TimerEvent.TIMER, updateCursorPosition);
            }

            timer.start();
        }

        private function stopTimer(event: TimelineEvent): void
        {
            timer.stop();
        }

        public function updateCursorPosition(event: TimerEvent): void
        {
            var timer: Timer = event.currentTarget as Timer;
            timeValue += timer.delay*60;

            timeline.currentTime = timeValue;
        }

        private function onEndAlert(event: TimelineEvent): void
        {
            trace(" onEndAlert ");
        }

        private function onEndReached(event: TimelineEvent): void
        {
//            trace(" onEndReached ");
        }

        private function onPlay(event: Event): void
        {
            timeline.isPlaying = true;
            startTimer(null);
        }

        private function onPause(event: Event): void
        {
            timeline.isPlaying = false;
            stopTimer(null);
        }

        private function obselSelectEvent(event: ListEvent): void {
            this.currentObsel = event.target.selectedItem;
            preview_ta.text = event.target.selectedItem.toString();
        }

        /**
         * Save the trace displayed in the table.
         */
        private function saveTraceTo(format: String = "tsv"): void
        {
            var fr: FileReference = new FileReference();
            /* We build a temporary trace from the displayed obsels */
            var temp: Trace = new Trace();

            temp.obsels = (obselList_dg.dataProvider as ArrayCollection);
            if (format == "ttl")
                fr.save(temp.toTTL());
            else
                fr.save(temp.toTSV());
        }

        private function evaluateTales(expr: String): void
        {
            var res: String;
            var ctx: Context = new Context(this);
            ctx.locals['obsel'] = this.currentObsel;
            ctx.locals['tl'] = this.currentTraceLine;
            ctx.locals['tlg'] = this.currentTLG;
            try
            {
                res = ctx.evaluate(expr);
                preview_ta.text = res;
            }
            catch (e: PathNotFoundException)
            {
                preview_ta.text = "Error: " + e.message + "\n" + e.getStackTrace();
            }

        }

        private function onTALESTextInput(event: TextEvent): void
        {
            TALESUtil.onTALESTextInput(event, { 'this': this,
                                                'obsel': this.currentObsel,
                                                'tl': this.currentTraceLine,
                                                'tlg': this.currentTLG
                                              },
                                       function (msg: String): void { preview_ta.text = msg; });
        }

        public function debug(): void
        {
            /* Create a timeline, add it to stage. Then load a layout
             * and on layout load complete, use it. */
            var content: spark.components.NavigatorContent = new spark.components.NavigatorContent();
            content.label = "Debug";
            var tl: Timeline = new Timeline();
            tl.percentWidth = 100;
            tl.percentHeight = 100;
            tl.setStyle("timeMode", "relative");
            tl.setStyle("cursorMode", "manual");
            tl.setStyle("adminMode", true);
            tl.setStyle("showPlayButton", false);
            tl.addEventListener(TimelineEvent.LAYOUT_NODE_ADDED, onAddLayoutNode);
            content.addElement(tl);
            tabnavigator.addElement(content);
            
            var loader: URLLoader=new URLLoader();
            loader.addEventListener(Event.COMPLETE, function (event: Event): void
                                    {
                                        onDebugLoadLayoutComplete(event, tl);
                                    });
            loader.load(new URLRequest(layout_ti.text));
        }
        
        private function onDebugLoadLayoutComplete(event: Event, tl: Timeline = null): void
        {
            var loader: URLLoader = event.target as URLLoader;
           
            tl.layoutXML      = new XML(loader.data);
            tl.timelineLayout = new Layout(tl);

            for each (var t: Trace in timeline.getCurrentTraces())
            {
                var tlg: TraceLineGroup = tl.addTrace(t, 0);
                tl.makeTracelineGroupVisible(tlg, false);
            }
        }
        
        protected function addTimeHolesButton_clickHandler(event:MouseEvent):void
        {
            
            var th1Start : Number = timeline.range.begin + (timeline.range.duration * .3);
            var th1End : Number = timeline.range.begin + (timeline.range.duration * .4);
            
            var th2Start : Number = timeline.range.begin + (timeline.range.duration * .6);
            var th2End : Number = timeline.range.begin + (timeline.range.duration * .8);
            
            timeline.makeTimeHole(th1Start, th1End);
            timeline.makeTimeHole(th2Start, th2End);
            
            
        }

    ]]> </fx:Script>

    <fx:Style source="default.css" />

    <s:VGroup id="allTestLayout" width="100%" height="100%" left="10" right="10" top="10" bottom="10" gap="20">

        <s:HGroup width="100%"  height="50%" gap="10">
            <s:VGroup  height="100%" left="10" gap="5">
                <!-- Loading  Trace-->
                <s:HGroup width="100%" >
                    <mx:Label text="TTL :"/>
                    <mx:TextInput id="urlTTL_ti" text="trace.ttl" enter="{loadTTL(urlTTL_ti.text)}" enabled="true" width="100%" />
                    <mx:Button label="Load" id="loadTTL_btn"  click="{loadTTL(urlTTL_ti.text)}" />
                    <s:Button label="Own trace" id="ownTTL_btn"  click="ownTrace()" />
                </s:HGroup>

                <!-- Loading Layout-->
                <s:HGroup width="100%" >
                    <mx:Label text="Layout :"/>
                    <mx:TextInput id="layout_ti" width="100%"  enter="{loadLayout(layout_ti.text)}" enabled="true" text="layout.xml"/>
                    <mx:Button label="Load" id="loadLayout_btn"  click="{loadLayout(layout_ti.text)}" />
                    <s:Button label="Save" click="saveLayout()"/>
                </s:HGroup>

                <!-- Loading Layout-->
                <s:HGroup width="100%" >
                    <mx:Label text="TALES expr:" />
                    <s:TextInput id="tales_ti" width="100%"  enter="{evaluateTales(tales_ti.text)}" textInput="onTALESTextInput(event)" enabled="true" text="this"/>
                </s:HGroup>

                <!-- Obsel preview -->
                <mx:Label text="Obsel preview" />
                <s:TextArea id="preview_ta" width="100%" height="100%" bottom="0" editable="true">
                </s:TextArea>
            </s:VGroup>

            <!-- Obsels DataGrid -->
            <s:VGroup  width="100%"  height="100%" >
                <s:Label id="dg_label" />
                <mx:DataGrid id="obselList_dg" width="100%" height="100%" fontFamily="Arial" fontSize="10"
                             change="obselSelectEvent(event);">
                    <mx:columns>
                        <mx:DataGridColumn dataField="trace.uri" headerText="TraceUri" width="160"/>
                        <mx:DataGridColumn dataField="uid" headerText="Uid" width="60"/>
                        <mx:DataGridColumn dataField="type" headerText="Type" width="160"/>
                        <mx:DataGridColumn dataField="begin" headerText="Begin" labelFunction="{toDate}" />
                        <mx:DataGridColumn dataField="end" headerText="End" labelFunction="{toDate}"/>
                    </mx:columns>
                </mx:DataGrid>
                <s:HGroup>
                   <mx:Button label="Save trace to TSV" click="{saveTraceTo('tsv')}" />
                   <mx:Button label="Save trace to TTL" click="{saveTraceTo('ttl')}" />
                   <mx:Button label="Debug" click="{debug()}" />
                    <mx:Button label="Create TimeHoles" id="addTimeHolesButton"  click="addTimeHolesButton_clickHandler(event)"/>
                </s:HGroup>
            </s:VGroup>
        </s:HGroup>

        <mx:TabNavigator id="tabnavigator" width="100%" height="50%">
          <s:NavigatorContent label="Loaded traces">
            <tl:Timeline id="timeline" width="100%" height="100%" playButtonClick="startTimer(event)"
                         pauseButtonClick="stopTimer(event)" timeMode="relative" timeRulerClick="onRulerClick(event)"
                         cursorMode="manual"
                         endAlertBeforeTime="30000"
                         adminMode="true"
                         showPlayButton="true"
                         endAlert="onEndAlert(event)"
                         endReached="onEndReached(event)" generateNewTraceline="onNewTl(event)" />
          </s:NavigatorContent>
        </mx:TabNavigator>

    </s:VGroup>

    <s:Label id="statusBar" top="10" right="10" left="10" width="100%" height="30" visible="false" backgroundColor="0xffff60" backgroundAlpha="90" color="0x0" fontWeight="bold" textAlign="center" verticalAlign="middle" text="Application started" />

    <mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
        <mx:ProgressBar id="loading"  horizontalCenter="true" verticalCenter="true" label="Loading..."  labelPlacement="center" indeterminate="true" visible="false" />
    </mx:Box>

    <fx:Declarations>
        <s:Resize id="showStatus"
            target="{statusBar}"
            heightTo="30"
            widthTo="{this.stage.width}"
            />

        <s:Resize id="hideStatus"
            target="{statusBar}"
            heightTo="0"
            widthTo="{this.stage.width}"
        />

<!--      <kapit:KapInspect /> -->
    </fx:Declarations>

</s:Application>
