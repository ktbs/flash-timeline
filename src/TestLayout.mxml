<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:tl="com.ithaca.timeline.*"
			   width="100%"  height="100%" 
			   creationComplete="init()" >
			   	
	<fx:Script> 
	<![CDATA[
		import com.ithaca.timeline.Layout;
		import com.ithaca.timeline.skins.TimelineSkin;
		import com.ithaca.timeline.skins.TraceLineGroupSkin;
		import com.ithaca.timeline.ISelector;
		import com.ithaca.timeline.LayoutModifier;
		import com.ithaca.timeline.LayoutNode;
		import com.ithaca.timeline.Timeline;
		import com.ithaca.timeline.TraceLine;
		import com.ithaca.timeline.TraceLineGroup;
		import com.ithaca.timeline.SelectorRegexp;
		import com.ithaca.traces.Obsel;
		import com.ithaca.traces.Trace;
		
		import flash.events.*;
		import flash.net.FileReference;
		import flash.display.StageScaleMode;
		import flash.display.StageAlign;
		import flash.events.Event;
		
		import mx.collections.ArrayCollection;
		import mx.collections.XMLListCollection;
		import mx.controls.*;
		import mx.events.*;
		
		private var _xmlLayout		: XMLList =  new XMLList();
		private var _xmlLayoutDP	: XMLListCollection = new XMLListCollection( _xmlLayout );
		private var tlg				: TraceLineGroup = new TraceLineGroup( null );
		private var layoutTree 		: XML;				
		
		protected function init() : void
		{
			allTestLayout.enabled = false;			
			urlTTL_ti.text = "trace.ttl";
			loadLayout( "layout.xml");		
		}		
		
		protected function browse(event:MouseEvent):void
		{			
			var myFileReference :FileReference = new FileReference( ); 
			
			myFileReference.addEventListener(Event.SELECT, selectHandler);
			myFileReference.browse();		
		}
		private function selectHandler(event:Event):void {
			var file:FileReference = FileReference(event.target);
			
			urlTTL_ti.text = "trace/" + file.name;
		}
		
		protected function loadLayout( layoutFilename : String ):void
		{
			var loader:URLLoader=new URLLoader();
			
			//loader.dataFormat=URLLoaderDataFormat..;
			loader.addEventListener(Event.COMPLETE, onLoadLayoutComplete);
			loader.load(new URLRequest(layoutFilename));
			
			loadingSpinner.visible = true;
			loadingSpinner.enabled = true;
		}
		
		
		private function onLoadLayoutComplete(event:Event):void 
		{
			//we init the trace object
			var loader:URLLoader=event.target as URLLoader;
			
			layoutTree = new XML(loader.data);
			
			timeline.timelineLayout = new Layout( timeline, layoutTree );
			
			loadingSpinner.visible = false;
			loadingSpinner.enabled = false;			
			
			allTestLayout.enabled = true;
		}
		
		
		protected function loadTTL():void
		{
			var loader:URLLoader=new URLLoader();
			
			loader.dataFormat=URLLoaderDataFormat.BINARY;
			loader.addEventListener(Event.COMPLETE, onLoadTTLComplete);
			loader.load(new URLRequest(urlTTL_ti.text));
			
			loadingSpinner.visible = true;
			loadingSpinner.enabled = true;
		}	
		
		
		public function ttlToTrace(ttl:String, theTrace:Trace):void
		{
			//we split the ttl on each "." line (kind of an "end of instruction" in ttl (?))
			var ar:Array = ttl.split("\n.\n");
			
			for each (var l: String in ar)
			{
				//if(l.substr(0,7) != "@prefix")
				//{
				l = l + "\n.\n"; //we (re)add the "." line at the end of instruction (because the "split function" has not include it)
				
				//for each "ttl instruction", we create a new obsel and initialize it with the "ttl insctruction" content
				var obs:Obsel = new Obsel("temp");
				obs.updateFromRDF(l);
				
				//if the initialization from the ttl chunk is ok, we add the obsel to the trace
				if(obs.type != "temp")
					theTrace.addObsel(obs);
				//}
			}
		}
		
		private function onLoadTTLComplete(event:Event):void 
		{
			//we init the trace object
			var loader:URLLoader=event.target as URLLoader;
			var trace_ttl:String = loader.data;
			
			var theTrace:Trace = new Trace(421,urlTTL_ti.text); //Dirty
			theTrace.autosync = false;
			
			ttlToTrace(trace_ttl, theTrace);
			
			loadingSpinner.visible = false;
			loadingSpinner.enabled = false;		
			
			timeline.addTrace(theTrace);
			
			updateDisplay();
		}
		
		private function changeEvt(event:Event):void {
			var theData:String = ""
			if (event.currentTarget.selectedItem.@data) {
				theData = " Data: " + event.currentTarget.selectedItem.@data;
			}
			if ( event.currentTarget.selectedItem.@type == "traceline" )
				obselList_dg.dataProvider = TraceLine.traceLineTmp[ event.currentTarget.selectedItem.@tracelineUid ]._obsels; 
			else 
				obselList_dg.dataProvider = null;
		}
		
		private function itemOpenEvt(event:TreeEvent):void {
		}
		
		//temp debug
		public function updateDisplay () : void
		{
			_xmlLayout = new XMLList(<timeline type="timeline" label="Timeline" />);
			
			for each ( var tlg : LayoutNode in timeline.tracelineGroups)
			{
				var newNode:XML = <TraceLineGroup />;
				newNode.@label = (tlg.value as TraceLineGroup)._trace.uri;
				newNode.@type = "tracelinegroup";
				for each ( var tl : LayoutNode in tlg.children )
					updateTraceLine( newNode, tl );  
				_xmlLayout.appendChild( newNode );	
			}
			
			_xmlLayoutDP = new XMLListCollection( _xmlLayout );
			timeLineTree.dataProvider = _xmlLayoutDP ;
			
			function updateTraceLine( currentNode : XML, node : LayoutNode) : void
			{
				var nodeXml:XML = <TraceLine />;
				
				if (node.value is TraceLine)
				{
					var traceline : TraceLine = node.value as TraceLine;
					nodeXml.@label = "traceLine " + traceline.title + ", size : " + traceline._obsels.length ;
					nodeXml.@tracelineUid = traceline.tracelineUid;
					nodeXml.@type = "traceline";
				}
				else
				{
					var modifier : LayoutModifier = node.value as LayoutModifier;
					nodeXml.@label = "modifier " + modifier._splitter  ;				
					nodeXml.@type = "modifier";
				}
				
				for each ( var child : LayoutNode in node.children )
					updateTraceLine( nodeXml, child );
				currentNode.appendChild( nodeXml );
			}			
		}		
			
	]]> </fx:Script>
	
	<fx:Style source="defaults.css" />
	
	<s:Group id="allTestLayout" width="100%" height="100%" left="10" right="10" top="10" bottom="10">		
		<s:layout> <s:VerticalLayout gap="20" />	</s:layout>
		
		
		<s:HGroup width="100%"  height="50%" gap="10">			
			<s:VGroup  height="100%" left="10" gap="5">					
				<!-- Loading --> 		
				<s:Group y="10" width="100%" >
					<mx:Label y="2" text="TTL :"/>
					<mx:TextInput id="urlTTL_ti" x="40"  width="194" text="{urlTTL_ti.text}" enabled="true"/>
					<mx:Button label="Load" id="loadTTL_btn"  click="loadTTL()" top="1" left="324"/>
					<mx:Label x="40" y="30" text="Loading..." id="loading_lbl" visible="false" />	
					<s:Button x="250" y="1" label="Browse" click="browse(event)"/>		
				</s:Group>
				
				<!-- Tree / Layout -->
				<mx:Tree id="timeLineTree" x="20" y="90"  width="400" height="100%" labelField="@label" itemOpen="itemOpenEvt(event);" change="changeEvt(event);" />
			</s:VGroup>
				
			<!-- Obsels DataGrid -->
			<s:Group  width="100%"  height="100%" >
				<s:Label id="dg_label" />
				<mx:DataGrid id="obselList_dg" y="16" width="100%" height="100%" fontFamily="Arial" fontSize="10">
					<mx:columns>
						<mx:DataGridColumn dataField="trace.uri" headerText="TraceUri" width="160"/>
						<mx:DataGridColumn dataField="uid" headerText="Uid" width="60"/>
						<mx:DataGridColumn dataField="type" headerText="Type" width="160"/>
						<mx:DataGridColumn dataField="begin" headerText="Begin"/>
						<mx:DataGridColumn dataField="end" headerText="End"/>
					</mx:columns>
				</mx:DataGrid>
			</s:Group>						 
		</s:HGroup>
			
		<tl:Timeline id="timeline" width="100%" height="50%" />
	</s:Group>
	
	
	
	<mx:Box id="loadingSpinner" horizontalAlign="center" verticalAlign="middle" width="100%" height="100%" visible="{timeline != null}" >
		<mx:ProgressBar  label="Loading..."   labelPlacement="center" indeterminate="true" />
	</mx:Box>
	
</s:Application>
