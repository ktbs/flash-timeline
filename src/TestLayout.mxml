<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:tl="com.ithaca.timeline.*"
			   width="100%"  height="100%" 
			   creationComplete="init()" >
			   	
	<fx:Script> 
	<![CDATA[
		import com.ithaca.timeline.Layout;
		import com.ithaca.timeline.ObselSkin;
		import com.ithaca.timeline.skins.TimelineSkin;
		import com.ithaca.timeline.skins.TraceLineGroupSkin;
		import com.ithaca.timeline.ISelector;
		import com.ithaca.timeline.LayoutModifier;
		import com.ithaca.timeline.LayoutNode;
		import com.ithaca.timeline.Timeline;
		import com.ithaca.timeline.TraceLine;
		import com.ithaca.timeline.TraceLineGroup;
		import com.ithaca.timeline.SelectorRegexp;
		import com.ithaca.traces.Obsel;
		import com.ithaca.traces.Trace;
		
		import flash.events.*;
		import flash.net.FileReference;
		import flash.display.StageScaleMode;
		import flash.display.StageAlign;
		import flash.events.Event;
		import mx.formatters.DateFormatter;		
		import mx.collections.ArrayCollection;
		import mx.collections.XMLListCollection;
		import mx.controls.*;
		import mx.events.*;
		
		private var _xmlLayout		: XMLList =  new XMLList();
		private var _xmlLayoutDP	: XMLListCollection = new XMLListCollection( _xmlLayout );
		private var layoutTree 		: XML;				
		
		protected function init() : void
		{
			allTestLayout.enabled = false;			
			urlTTL_ti.text = "trace.ttl";
			layout_ti.text = "layout.xml";
			loadLayout( layout_ti.text );	
		}		
		
		protected function browse(event:MouseEvent):void
		{			
			var myFileReference :FileReference = new FileReference( ); 
			
			myFileReference.addEventListener(Event.SELECT, selectHandler);
			myFileReference.browse();		
		}
		private function selectHandler(event:Event):void {
			var file:FileReference = FileReference(event.target);
			
			urlTTL_ti.text = "trace/" + file.name;
		}
		
		protected function loadLayout( layoutFilename : String ):void
		{
			var loader:URLLoader=new URLLoader();
			
			loader.addEventListener(Event.COMPLETE, onLoadLayoutComplete);
			loader.load(new URLRequest(layoutFilename));
			
			loading.visible = true;
			loading.label = "Loading Layout...";
		}
		
		
		private function onLoadLayoutComplete(event:Event):void 
		{
			loading.visible = false;	
			
			//we init the trace object
			var loader:URLLoader=event.target as URLLoader;
			timeline.layoutXML 		= new XML( loader.data );
			timeline.timelineLayout = new Layout( timeline );
			
			allTestLayout.enabled = true;
		}
		
		
		protected function loadTTL():void
		{
			var loader:URLLoader=new URLLoader();
			
			loader.dataFormat=URLLoaderDataFormat.BINARY;
			loader.addEventListener(Event.COMPLETE, onLoadTTLComplete);
			loader.load(new URLRequest(urlTTL_ti.text));
			
			loading.visible = true;		
			loading.label = "Loading TTL...";
		}	
		
		
		public function ttlToTrace(ttl:String, theTrace:Trace):void
		{	
			//we split the ttl on each "." line (kind of an "end of instruction" in ttl (?))
			var ar:Array = ttl.split("\n.\n");
			
			for each (var l: String in ar)
			{
				l = l + "\n.\n"; //we (re)add the "." line at the end of instruction (because the "split function" has not include it)
				
				//for each "ttl instruction", we create a new obsel and initialize it with the "ttl insctruction" content
				var obs:Obsel = new Obsel("temp");
				obs.updateFromRDF(l);
				
				//if the initialization from the ttl chunk is ok, we add the obsel to the trace
				if(obs.type != "temp")
					theTrace.addObsel(obs);
			}
						
		}
		
		private function onLoadTTLComplete(event:Event):void 
		{	
			loading.visible = false;
			
			//we init the trace object
			var loader:URLLoader=event.target as URLLoader;
			var trace_ttl:String = loader.data;
			
			var theTrace:Trace = new Trace(421,urlTTL_ti.text); //Dirty
			theTrace.autosync = false;
			
			loading.visible = true;
			loading.label = "TTL to trace...";
			ttlToTrace(trace_ttl, theTrace);
			
			activityObselsToDurative( theTrace );
			
			loading.label = "Adding Trace...";
			timeline.addTrace(theTrace);	
			loading.visible = false;
		}
		
		private function activityObselsToDurative( theTrace : Trace ) : void
		{
			var activityStart : Obsel = null;
			for each (var obsel : Obsel in theTrace.obsels)
			{
				if (obsel.type == "ActivityStart" || obsel.type == "ActivityStop"  )
				{
					if (activityStart)
						activityStart.end = obsel.begin;
					
					if (obsel.type == "ActivityStart" )	
						activityStart = obsel;
					else
						activityStart = null;
				}
			}
		}
		private function toDate(item:Object, column:DataGridColumn):String
		{	
			var df : DateFormatter = new DateFormatter();
			df.formatString = "JJ:NN:SS.QQ";
			var n : Number = item[column.dataField]
			var string : String = df.format( new Date (n) );
			return string;
		}
		
		
			
	]]> </fx:Script>
	
	<fx:Style source="defaults.css" />
	
	<s:VGroup id="allTestLayout" width="100%" height="100%" left="10" right="10" top="10" bottom="10" gap="20">		
		
		<s:HGroup width="100%"  height="50%" gap="10">			
			<s:VGroup  height="100%" left="10" gap="5">					
				<!-- Loading  Trace--> 		
				<s:Group width="100%" >
					<mx:Label y="2" text="TTL :"/>
					<mx:TextInput id="urlTTL_ti" x="50"  width="194" text="{urlTTL_ti.text}" enabled="true"/>
					<mx:Button label="Load" id="loadTTL_btn"  click="loadTTL()" top="1" left="324"/>
					<s:Button x="250" y="1" label="Browse" click="browse(event)"/>		
				</s:Group>
				
				<!-- Loading Layout-->
				<s:Group width="100%" >
					<mx:Label y="2" text="Layout :"/>
					<mx:TextInput id="layout_ti" x="50"  width="194"  enabled="true"/>
					<mx:Button label="Load" id="loadLayout_btn"  click="{loadLayout(layout_ti.text)}" top="1" left="324"/>
				</s:Group>			
			</s:VGroup>
				
			<!-- Obsels DataGrid -->
			<s:Group  width="100%"  height="100%" >
				<s:Label id="dg_label" />
				<mx:DataGrid id="obselList_dg" y="16" width="100%" height="100%" fontFamily="Arial" fontSize="10">
					<mx:columns>
						<mx:DataGridColumn dataField="trace.uri" headerText="TraceUri" width="160"/>
						<mx:DataGridColumn dataField="uid" headerText="Uid" width="60"/>
						<mx:DataGridColumn dataField="type" headerText="Type" width="160"/>
						<mx:DataGridColumn dataField="begin" headerText="Begin" labelFunction="{toDate}" />
						<mx:DataGridColumn dataField="end" headerText="End" labelFunction="{toDate}"/>
					</mx:columns>
				</mx:DataGrid>
			</s:Group>						 
		</s:HGroup>
			
		<tl:Timeline id="timeline" width="100%" height="50%" />
	</s:VGroup>

	
	<mx:Box width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:ProgressBar id="loading"  horizontalCenter="true" verticalCenter="true" label="Loading..."  labelPlacement="center" indeterminate="true" visible="true" />
	</mx:Box>
	
</s:Application>
