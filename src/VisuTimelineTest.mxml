<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:timeline="com.ithaca.visu.controls.timeline.*"
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   creationComplete="init()">
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.ithaca.traces.Obsel;
			import com.ithaca.traces.Trace;
			import com.ithaca.traces.view.ObselLine;
			import com.ithaca.traces.view.ObselStich;
			import com.ithaca.visu.controls.timeline.TraceLineB;
			import com.ithaca.visu.ui.utils.ColorEnum;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.SortField;
		
			[Bindable]
			public var startTime:Number;
		
			[Bindable]
			public var stopTime:Number;
			
			
			private var testCursor:ObselLine;
			private var testTimeLine:TraceLineB;
			
			[Bindable]
			//	private var timer:Timer;
			
			private var timerSynchro:Timer;
			private var timerRetroDocumentSegment:Timer;
			private var currentTimeSessionMilliseconds:Number;
			
			public var listSessionOpen : ArrayCollection;
			
			[Bindable]
			public var listSessionClose : ArrayCollection;
			
			private var pickCheryClick:Number = 0;
		//	private var commentTimeLine:TraceLineComment;
			private var currentSessionDateRecording:Date = null;
			private var currentSessionDuration:Number;
			private var currentSessionId:int;
			private var DELTA_STICH:int = 20;
		//	private var currentRetroDocumentSegmentPlaying:RetroDocumentSegment = null;
			private var beginTimeCurrentSegment:Number= 0;
			private var clickOnTimeLine:Boolean = true;
			
			// interval the decalage max in seconds
			[Bindable]
			private var maxIntervalDecalage:Number = 1.1;
			// interval the contol of the decalage im microseconds 
			private var INTERVAL_CONTROL_DECALAGE:Number = 10000;
			// interval the check the decalage in seconds
			[Bindable]
			private var intervalCheckDecalage:Number = 5;
			// time start session plus time in this session 
			private var currentTime:Number;
		
		
			protected var entityNames:Object = {};
			protected var mapTags:Object = {};
			
			protected var mapTypes:Object = {};
			protected var mapEntities:Object = {};
			
			protected var jointTraceMedia:Object = {};
			
			
			protected var traceGridSortFields:Array = [new SortField("type", false, false), new SortField("begin", false, false, true)];
			
			[Bindable]
			protected var obselCollectionToDisplay:ArrayCollection = new ArrayCollection([]);
			
			[Bindable]
			protected var obselSelection:ArrayCollection = new ArrayCollection([]);
				
			protected function init() : void
			{
				urlTTL_ti.text="trace.ttl";
			}
				
			protected function loadTTL(event:MouseEvent):void
			{
				var loader:URLLoader=new URLLoader();
				
				loader.dataFormat=URLLoaderDataFormat.BINARY;
				loader.addEventListener(Event.COMPLETE, onCallComplete);
				loader.load(new URLRequest(urlTTL_ti.text));
			
				loading_lbl.visible = true;
			}
				
			public function ttlToTrace(ttl:String, theTrace:Trace):void
			{
					//we split the ttl on each "." line (kind of an "end of instruction" in ttl (?))
					var ar:Array = ttl.split("\n.\n");
					
					for each (var l: String in ar)
					{
						//if(l.substr(0,7) != "@prefix")
						//{
						l = l + "\n.\n"; //we (re)add the "." line at the end of instruction (because the "split function" has not include it)
						
						//for each "ttl instruction", we create a new obsel and initialize it with the "ttl insctruction" content
						var obs:Obsel = new Obsel("temp");
						obs.updateFromRDF(l);
						
						//if the initialization from the ttl chunk is ok, we add the obsel to the trace
						if(obs.type != "temp")
							theTrace.addObsel(obs);
						//}
					}
			}
		
			private function onCallComplete(event:Event):void 
			{
				//we init the trace object
				var loader:URLLoader=event.target as URLLoader;
				var trace_ttl:String = loader.data;
			
				var theTrace:Trace = new Trace(421,urlTTL_ti.text); //Dirty
				theTrace.autosync = false;
				
				loading_lbl.text += " ttlToTrace ";
				
				ttlToTrace(trace_ttl, theTrace);
				
				loading_lbl.visible = false;
					
				createSessionTimeLine(100000000,0);
				//addTraceLineOnViewTraceLineGroup({userId: 1, show: "true", userName:"userName", userAvatar: null, userColor: "red", theTrace.g, listElementTraceLine : listElementsTraceLine },10000,0);
				addTraceLine( 1, "userName", null, ColorEnum.getColorByCode("0") , theTrace);
				
		/* 		//we store the trace object along with some metada that we have to construct		
				var subTraces:ArrayCollection = ttl_list.selectedItem.subTraces;
				subTraces.removeAll();
			
				//we calculate the gbegin and end of each trace contained in the TTL
				for each(var obs:Obsel in theTrace.obsels)
				{
					if(obs.traceUriFromRdf)
					{
						var alreadyExist:Boolean = false;
						var size:uint = 0;
						for each(var tr:Object in subTraces)
							if(tr.hasOwnProperty("uri") && tr.uri == obs.traceUriFromRdf)
							{
								tr["begin"] = Math.min(obs.begin, tr["begin"]);
								tr["end"] = Math.max(obs.end, tr["end"]);
								tr["size"] = (tr["size"] as uint) + 1; 
								alreadyExist = true;
								break;
							}
			
						if(alreadyExist == false)
						{
							subTraces.addItem({"uri":obs.traceUriFromRdf, "activated":true, "begin":obs.begin, "end":obs.end, "size":1});
						}
					}
				}
			
				//we create a new subtrace that will contain LDTSession Obsel, this obsel correspond to the different trace we have in the TTL
				var globalBegin:Number = subTraces[0]["begin"];
				var globalEnd:Number = subTraces[0]["end"];
				var sessionSubTraceUri:String = encodeURI("Sessions");
				for each(var subTrace:Object in subTraces)
				{
					var subTraceUri:String = (subTrace["uri"] as String);
					var theObsel:Obsel = new Obsel("sessionLDT",0,"",{"traceUid":subTraceUri.substr(1,subTraceUri.length-2)}, subTrace["begin"], subTrace["end"]);
					theObsel.traceUriFromRdf = sessionSubTraceUri;
			
					theTrace.addObsel(theObsel);
				}
			
				subTraces.addItem({"uri":sessionSubTraceUri, "activated":true, "begin":globalBegin, "end":globalEnd});
			
				for each(var ttl:Object in arTTL)
					if(ttl.hasOwnProperty("title") && ttl.title == titleTTL_ti.text) //Dirty
					{
						ttl["trace"] = theTrace;
						ttl["subTraces"] = subTraces;
						break;
					} */
	
				//UI Update
				
			}
			
		
				
			private function createSessionTimeLine(durationSession:Number,startSession:Number):void
			{
				// set current session duration 
				this.currentSessionDuration = durationSession;
				this.sessionTimeLine.sessionTimeLineLayout.durationSession = durationSession;
				this.sessionTimeLine.sessionTimeLineLayout.startTime = startSession;
				
				var widthGroup:Number = this.sessionTimeLine.sessionTimeLineLoggedUser.width;
				var nbrLabelTime:int = widthGroup/DELTA_STICH;
				nbrLabelTime = 50;
				var deltaTime:int = durationSession/nbrLabelTime;
				var every:int = 6;
				var count:int = 1;
				for(var nPart:int = 0 ; nPart < nbrLabelTime; nPart++)
				{
				var beginTimeObsel:Number = nPart*deltaTime;
				// in seconds
					
				var obselTime:ObselStich = new ObselStich()
				obselTime.setBegin(beginTimeObsel);
				obselTime.setEnd(beginTimeObsel);
				obselTime.height = 10;
				if(count == every)
				{
					obselTime.height = 20;
					count = 1;
					var minuts:int = (beginTimeObsel/1000)/60;
						var minutsString:String = minuts.toString();
						if(minuts<10){
							minutsString = "0"+minutsString; 
						}
						var seconds:int = (beginTimeObsel/1000)-minuts*60;
						var secondsString:String = seconds.toString();
						if(seconds < 10)
						{
							secondsString = "0"+secondsString;
						}
						obselTime.setLabel(minutsString+":"+secondsString);
					}
					count++;
					//obselTime.text = labelTextMin+" min.";
					this.sessionTimeLine.sessionTimeLineLoggedUser.addElement(obselTime);
				}
			}
				
				public function addTraceLine(userId:int, userName:String, userAvatar:String, userColor:String, thetrace:Trace):void
				{
					
					var listElementsTraceLine:ArrayList = new ArrayList();
					listElementsTraceLine.addItem({id: 0, titleTraceLine: "Instructions", colorTraceLine : 454545, visible : false, listObsel:thetrace.obsels, added : false});
					listElementsTraceLine.addItem({id: 1, titleTraceLine: "Mots-Clés", colorTraceLine : 454545, visible : false, listObsel: new ArrayCollection(), added : false});
					listElementsTraceLine.addItem({id: 2, titleTraceLine: "Documents", colorTraceLine : 454545, visible : false, listObsel: new ArrayCollection(), added : false});
					listElementsTraceLine.addItem({id: 3, titleTraceLine: "Messages", colorTraceLine : 454545, visible : false, listObsel: new ArrayCollection(), added : false});
					listElementsTraceLine.addItem({id: 4, titleTraceLine: "Marqueurs", colorTraceLine : 454545, visible : false, listObsel: new ArrayCollection(), added : true});
					addTraceLineOnViewTraceLineGroup({userId: userId, show: false, userName:userName, userAvatar: userAvatar, userColor: userColor, listTitleObsels: new ArrayCollection(), listElementTraceLine : listElementsTraceLine },1000,0);	
					
				}
				
				
				private function addTraceLineOnViewTraceLineGroup(traceLineObj:Object, durationSession:Number,startRecordingSession:Number):void
				{
					var userId:int = traceLineObj.userId;
					var traceLine:TraceLineB = new TraceLineB()
					traceLine.percentWidth = 100;
					//	traceLine.height = 30;
					traceLine.left = 0;
					traceLine.right = 0;
					traceLine.sourceImageUserTraceLine = traceLineObj.userAvatar;
					traceLine.nameUserTraceLine = traceLineObj.userName;
					traceLine.colorUserTraceLine = traceLineObj.userColor;
					traceLine.durationSession = durationSession;
					traceLine.startTimeSession = startRecordingSession;								
					traceLine.idUserTraceLine = userId;		
					traceLine.tempList = traceLineObj.listTitleObsels;
					traceLine.listElementTraceline = traceLineObj.listElementTraceLine;
	//				traceLine.addEventListener(TraceLineEvent.ADD_LIST_OBSEL, onAddListObsel);
	//				traceLine.addEventListener(TraceLineEvent.REMOVE_LIST_OBSEL, onRemoveListObsel); 
					
	//				traceLine.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompletTraceLine);
					// listener activity user on observer the obsel
	//				traceLine.addEventListener(FlexEvent.CREATION_COMPLETE, onCreationCompletTraceLine);
					
	//				if(userId == Model.getInstance().getLoggedUser().id_user)
					{
						// create sessionTimeLine
						this.createSessionTimeLine(durationSession,0); 
						this.testTimeLine = traceLine;
						
						traceLine.nameUserTraceLine = ("Ma trace");
						this.traceLineGroup.addElementAt(traceLine, 0); 			
					}
	//					else
					{
						this.traceLineGroup.addElement(traceLine);
					}
					traceLineObj.show = true;
				}
			
		
		]]>
	</fx:Script>
	<fx:Style source="defaults.css" />
	
	<mx:TextInput id="urlTTL_ti" x="46" y="10" width="276"
				  text="{urlTTL_ti.text}" enabled="true"/>
	<mx:Label x="6" y="12" text="TTL :"/>
	<mx:Button label="Load" id="loadTTL_btn"  click="loadTTL(event)" top="11" left="329"/>
	<mx:Label x="10" y="41" text="Loading..." id="loading_lbl" visible="false" />
	
	<s:Panel y="100" width="100%" height="40%" id="panelTimeLine">
		 <s:VGroup width="100%" height="100%" gap="0">
			 <s:Group width="100%" height="100%" id="groupTimeLine">
				 <timeline:TimeLineSession id="sessionTimeLine" width="100%"  showButtonNavigation="true" top="0"/>
				 <s:Group width="100%" height="100%" top="75">
					 <s:Scroller left="1" right="1" top="1" bottom="1">
						 <s:Group width="100%" height="100%">
							 <s:layout>
								 <s:VerticalLayout gap="5"/>
							 </s:layout>
							 <s:Group id="traceLineGroup" width="100%" height="100%">
								 <s:layout>
									 <s:VerticalLayout gap="4"/>
								 </s:layout>
							 </s:Group>
						 </s:Group>
					 </s:Scroller>
				 </s:Group>
			 </s:Group>
			 <s:HGroup>
				 <s:Label text="Zoom: " />
				 <s:HSlider id="durationSessionSlider" 						   
							liveDragging="true" width="15%" enabled="false"  />
				 
				 <s:Label text="Position: "/>
				 <s:HSlider id="startTimeSessionSlider" 
							liveDragging="true" width="70%" enabled="false" />
			 </s:HGroup>
		 </s:VGroup>
	 </s:Panel>
	
	
</s:Application>
