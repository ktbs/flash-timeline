<?xml version="1.0" encoding="utf-8"?>
<!---
    Cursor that moves according to the current time of the Timeline. Two Cursors are required by skin parts of the Timeline class.
    <p>The first is bound to the global time ruler (timeline.globalCursor) and the second is bound to the selected context time ruler (timeline.contextCursor).</p>
    @see Timeline
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/halo"
               xmlns:tl="com.ithaca.timeline.*"
               creationComplete="creationCompleteHandler(event)" width="1"
              >
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>

    <fx:Script>    <![CDATA[
            import com.ithaca.timeline.CursorIcons;
            import com.ithaca.timeline.Timeline;
            import com.ithaca.timeline.Stylesheet;
            import com.ithaca.timeline.TimeToolTip;
            import com.ithaca.timeline.events.TimelineEvent;
            import flash.events.Event;
            import flash.events.MouseEvent;
            import flash.geom.Point;
            import flash.geom.Rectangle;
            import mx.managers.ToolTipManager;
            import mx.controls.ToolTip;
            import mx.events.ToolTipEvent;
            import mx.formatters.DateFormatter;
            import mx.events.MoveEvent;
            import mx.core.DragSource;
            import mx.events.DragEvent;
            import mx.managers.DragManager;
            import mx.core.UIComponent;
            import spark.primitives.Rect;
            import com.ithaca.timeline.TimeRuler;

            [Bindable]
            public var timeline: Timeline;

            [Bindable]
            public var isDragging: Boolean = false;

            [Bindable]
            public var timeRuler: TimeRuler;

            public var withToolTip: Boolean = false;

            private    var dateFormatter: DateFormatter;

            private var offsetX: Number;
            private var offsetY: Number;

            protected function creationCompleteHandler(event: Event): void
            {
                dateFormatter  = new DateFormatter();
                dateFormatter.formatString = "JJ:NN:SS";
                if (withToolTip)
                {
                    addEventListener(MoveEvent.MOVE, onToolTipShow);
                }
            }

            protected function onToolTipShow(event: Event): void
            {
                tt.visible = true;
                if (visible && !isDragging)
                {
                    if (timeline.isRelativeTimeMode)
                        tt.text = dateFormatter.format(new Date(timeline.currrentRelativeTime).toUTCString());
                    else
                        tt.text = dateFormatter.format(new Date(timeline.currentTime));
                }
            }

        private function startDragging(event:MouseEvent):void
        {
            offsetX = event.localX;
            isDragging = true;

            stage.addEventListener(MouseEvent.MOUSE_MOVE, dragCursor);
            stage.addEventListener(MouseEvent.MOUSE_UP, dragCursor);
        }

        // This function is called every time the mouse moves,
        // as long as the mouse button is pressed down.
        private function dragCursor(event:MouseEvent):void
        {
            var parentMouse: Point = parent.globalToLocal(new Point(event.stageX, event.stageY));

            var newX: Number = parentMouse.x - offsetX;
            if (newX < 0)
                newX = 0;
            else if (newX > timeline.zoomContext.width - Stylesheet.renderersSidePadding)
                newX = timeline.zoomContext.width - Stylesheet.renderersSidePadding;

            if (event.type == MouseEvent.MOUSE_UP)
            {
                var tlEvent: TimelineEvent = new TimelineEvent(TimelineEvent.TIMERULER_CLICK, true);
                tlEvent.value = timeRuler.timeRange.positionToTime(newX, timeRuler.rulerWidth);
                dispatchEvent(tlEvent);

                isDragging = false;

                // Tell Flash Player to stop listening for the mouseMove event.
                stage.removeEventListener(MouseEvent.MOUSE_MOVE, dragCursor);
                stage.removeEventListener(MouseEvent.MOUSE_UP, dragCursor);

                if (withToolTip)
                    onToolTipShow(null);
            }
            else
            {
                x = newX + tt.width / 2 -1 ;
                if (withToolTip)
                {
                    if (timeline.isRelativeTimeMode)
                        tt.text     = dateFormatter.format(new Date(timeRuler.timeRange.positionToTime(newX, timeRuler.rulerWidth) - timeline.range._ranges[0]).toUTCString());
                    else
                        tt.text     = dateFormatter.format(new Date(timeRuler.timeRange.positionToTime(newX, timeRuler.rulerWidth)));
                }
            }

        }
        ]]>
    </fx:Script>

    <s:Group  id="cursor" width="100%" height="100%" >
        <s:Rect width="1"  height="100%"  >
             <s:stroke>
                <s:SolidColorStroke color="0xFF0000" weight="1"/>
             </s:stroke>
        </s:Rect>
    </s:Group>
    <tl:TimeToolTip id="tt" x="{-tt.width/2 -1 }" y="{cursor.y - tt.height  }" visible="false"  borderColor="0xFF0000" mouseDown="startDragging(event)" />
</s:Group>
