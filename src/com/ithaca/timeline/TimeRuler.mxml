<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/halo"
			   creationComplete="creationCompleteHandler()">
			   	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Style(name = "minLabelsGap", 	type = "Number", inherit = "no")]
		[Style(name = "maxLabelsGap", 	type = "Array", inherit = "no")]
		[Style(name = "minMarksGap", 	type = "Array", inherit = "no")]
		[Style(name = "maxMarksGap", 	type = "Array", inherit = "no")]
		[Style(name = "minorMarkHeight", type = "Array", inherit = "no")]
		[Style(name = "majorMarkHeight", type = "Array", inherit = "no")]
		[Style(name = "limitMarkHeight", type = "Array", inherit = "no")]
		[Style(name = "validIntervals", type = "Array", inherit = "no")]
		[Style(name = "labelsIntervals", type = "Array", inherit = "no")]
	</fx:Metadata>
	
	<fx:Script>	<![CDATA[
		import com.ithaca.timeline.events.TimelineEvent;
		import flash.display.Shape;
		import flash.globalization.DateTimeStyle;
		import spark.components.Label;
		import mx.formatters.DateFormatter;		
		import spark.primitives.Line;
		import flash.events.Event;
		import mx.events.ResizeEvent;
	
		private const LABEL_SIZE : Number = 200;
		
		public var timeRange : TimeRange;
		public var dateFormater : DateFormatter = new DateFormatter();
		
		[Bindable]
		public var startPosition		: Number 	= 0;
		[Bindable]
		public var rulerWidth  			: Number = 100;
		
		public var minLabelsGap 		: Number ;
		public var maxLabelsGap	 		: Number ;
		public var minMarksGap	 		: Number ;
		public var maxMarksGap	 		: Number ;
		public var minorMarkHeight		: Number ;
		public var majorMarkHeight		: Number ;
		public var limitMarkHeight		: Number ;
		public var validIntervals 		: Array ;
		public var majorIntervals 		: Array ;
		public var labelsIntervals 		: Array ;
		
		
		protected function creationCompleteHandler() : void
		{	
			minLabelsGap 	= getStyle("minLabelsGap");
			maxLabelsGap	= getStyle("maxLabelsGap");	 	
			minMarksGap	 	= getStyle("minMarksGap");	 	
			maxMarksGap	 	= getStyle("maxMarksGap");	
			minorMarkHeight	= getStyle("minorMarkHeight");	
			majorMarkHeight	= getStyle("majorMarkHeight");	
			limitMarkHeight	= getStyle("limitMarkHeight");	
			validIntervals 	= getStyle("validIntervals");	
			majorIntervals 	= getStyle("majorIntervals"); 	
			labelsIntervals = getStyle("labelsIntervals"); 	
			dateFormater.formatString = "JJ:NN:SS" ;
			ruler.addChild(new Shape);
		}
		
		private function getBestMarkerInterval( duration : Number, nb : Number ) : Object
		{			
			for ( var  i : int = 0; i < validIntervals.length; i++ )
				if ( duration/nb < validIntervals[i] )
					break;
				
			if ( i < validIntervals.length)
				return { mark : validIntervals[i], major : majorIntervals[i], label : labelsIntervals[i]};
			else
				return { mark : 0, major : 0, label : 0 };
		}
		
		private function drawRuler () : Shape
		{
			var usableRulerWidth : Number = rulerWidth - timeRange.timeHoleWidth * (timeRange.numIntervals - 1); 
			
			var shape			: Shape  = new Shape();
			var rulerDuration   : Number = timeRange.duration;			
			var nbMaxMarks		: Number = Math.floor( usableRulerWidth / minMarksGap );
			var interval        : Object = getBestMarkerInterval( rulerDuration, nbMaxMarks );
			
			shape.graphics.lineStyle( 1, 0x000000 );
			
			var xStart 	: Number =  startPosition + timeRange.timeToPosition( Math.ceil( timeRange.begin / interval.mark) * interval.mark, rulerWidth);
			var xEnd 	: Number =  startPosition + timeRange.timeToPosition( Math.ceil( timeRange.end / interval.mark) * interval.mark, rulerWidth);
			var xStep 	: Number = timeRange.timeToPosition( timeRange.begin +interval.mark, usableRulerWidth  );		
			
			var x 			: Number 	= xStart;			
			var lastLabel 	: Label 	= null;
			for ( var i : Number = 0; i < timeRange._ranges.length; i += 2)
			{					
				var tBegin : Number = Math.max( timeRange._ranges[i], 		timeRange.begin );
				var tEnd   : Number = Math.min( timeRange._ranges[i + 1], 	timeRange.end );
								
				if ( tBegin < timeRange._ranges[i + 1] && tEnd > timeRange._ranges[i] )
				{						
					if ( i == 0)
					{
						drawMark( shape,  startPosition,  limitMarkHeight );
						lastLabel = addLabel( tBegin,  startPosition );
					}
					else
					{
						drawMark( shape, x, limitMarkHeight );
						lastLabel = addLabel( tBegin, x , 10 );
					}
					
					lastLabel.setStyle('fontSize', '11');
					
					for(var t : Number  = Math.ceil( tBegin /interval.mark)*interval.mark; t < tEnd; t += interval.mark )
					{			
						drawMark( shape, x,  ( t % interval.major)? minorMarkHeight : majorMarkHeight);
						
						if ( t % interval.label == 0 )
						{
							if( x - lastLabel.x - LABEL_SIZE / 2 > minLabelsGap ) 
								lastLabel = addLabel( t, x );							
						}
						x += xStep;
					}
					
					if( x - lastLabel.x - LABEL_SIZE / 2 < 50 ) 
							timeLabels.removeElement(lastLabel);
					drawMark( shape, Math.min(x,startPosition + rulerWidth),  limitMarkHeight );
					lastLabel = addLabel( tEnd, Math.min(x,startPosition + rulerWidth) );
					lastLabel.setStyle('fontSize', '11');
					
					x += timeRange.timeHoleWidth;
				}
			}
			
			return shape;
		}		
		
		private  function drawMark( shape : Shape, pos : Number, height : Number ) : void
		{
			shape.graphics.moveTo( pos , 0);				
			shape.graphics.lineTo( pos , height  );	
		}
		
		private function addLabel( time : Number , position : Number, y : Number = 0) : Label
		{			
			var label : Label = new Label();
			var date  : Date  = new Date( time );
			
			label.text 	= dateFormater.format( date );
			label.x 	= position - LABEL_SIZE / 2;
			label.y 	= y;
			label.width = LABEL_SIZE ;
			label.setStyle('textAlign', 'center');
			label.setStyle('fontSize', '10');		
			timeLabels.addElement( label );			
			
			return label;
		}
		
		public function redraw(  event : ResizeEvent=null ) : void
		{
			if ( timeRange  && timeRange.duration >0)
			{
				if (event)
				{
					startPosition = event.currentTarget.x;
					rulerWidth 	  = event.currentTarget.width;
				}
				
				if ( 	timeLabels.numElements > 0)
					timeLabels.removeAllElements();
				if (ruler.numChildren > 0 )
					ruler.removeChildAt(0);
				ruler.addChildAt(drawRuler(), 0);
			}
		}
		
		public function onTimeRangeChange( e : TimelineEvent) :void
		{
			changeRange( e.currentTarget as TimeRange );
		}
		
		public function changeRange( tr : TimeRange ):void
		{
			timeRange 	= tr;			
			redraw();
		}

	]]> </fx:Script>
			 
	<s:BorderContainer id="time" backgroundColor="#F5F5F5" width="100%" minHeight="10"  horizontalCenter="true">	
			<s:layout> <s:VerticalLayout gap="4" /> </s:layout>
			<s:SpriteVisualElement  id="ruler" width="100%" height="15"/>
			<s:Group id="timeLabels" />									
	</s:BorderContainer>
	
</s:SkinnableContainer>