<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
                 xmlns:s="library://ns.adobe.com/flex/spark"
                 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:skins="com.ithaca.timeline.skins.*"
                 creationComplete="creationCompleteHandler(event)">
    <fx:Declarations>
        <!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
    </fx:Declarations>

    <fx:Metadata>[HostComponent("com.ithaca.timeline.ObselSkin")]</fx:Metadata>

    <fx:Script>
        <![CDATA[
            import com.ithaca.traces.Obsel;
            import com.ithaca.tales.Context;
            import mx.events.PropertyChangeEvent;
            import flash.events.Event;
            import flash.filters.BlurFilter;
            import flash.filters.ColorMatrixFilter;
            import flash.filters.GlowFilter;
            import flash.geom.ColorTransform;
            import mx.graphics.SolidColor;

            public var obsel : Obsel;

            protected function creationCompleteHandler(event: Event):void
            {
                obsel = hostComponent.obsel;
                container.backgroundFill = new SolidColor( hostComponent.getStyle( "backgroundColor" ) );
                obselText.editable = hostComponent.editable;
                obsel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onObselChange);                
                onObselChange();
            }

            protected function onObselChange(event: PropertyChangeEvent = null): void
            {
                var ctx: Context = null;

                if (hostComponent.getStyle("textExpression"))
                {
                    if (ctx === null) {
                        ctx = new Context(obsel);
                        ctx.locals['obsel'] = obsel;
                        ctx.locals['trace'] = obsel.trace;
                    }
                    obselText.text     = ctx.evaluate('string:' + hostComponent.getStyle("textExpression"));
                }
                else if (hostComponent.getStyle("textProp"))
                {
                    obselText.text     = obsel.props[ hostComponent.getStyle( "textProp" ) ];
                }

                if (hostComponent.getStyle("iconExpression"))
                {
                    if (ctx === null) {
                        ctx = new Context(obsel);
                        ctx.locals['obsel'] = obsel;
                        ctx.locals['trace'] = obsel.trace;
                    }
                    icon.source = ctx.evaluate("string:" + hostComponent.getStyle("iconExpression"));
                }
                else if (hostComponent.getStyle("icon"))
                {
                    icon.source = hostComponent.getStyle( "icon" );
                }

                if (hostComponent.getStyle("tooltipExpression"))
                {
                    if (ctx === null) {
                        ctx = new Context(obsel);
                        ctx.locals['obsel'] = obsel;
                        ctx.locals['trace'] = obsel.trace;
                    }
                    icon.toolTip = ctx.evaluate("string:" + hostComponent.getStyle("tooltipExpression"));
                }
                else if (hostComponent.getStyle("tooltipProp"))
                {
                    icon.toolTip =  obsel.props[hostComponent.getStyle("tooltipProp")];
                }
            }
            
            protected function onTextChange(event:Event):void
            {
                if ( hostComponent.getStyle("textProp"))
                {
                    obsel.props[hostComponent.getStyle("textProp")] = obselText.text;
                    onObselChange();
                }
            }
        ]]>
    </fx:Script>

    <s:BorderContainer id="container" cornerRadius="4"  height="25" >
        <s:layout><s:HorizontalLayout gap="2" /> </s:layout>
        <mx:Image id="icon" />
        <s:TextInput id="obselText" maxWidth="80"  fontSize="11" contentBackgroundAlpha="0" focusOut="onTextChange(event)" />
    </s:BorderContainer>
</s:Skin>
