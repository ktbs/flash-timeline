<?xml version="1.0" encoding="utf-8"?>
<!---
This skin displays an Obsel as an icon with associated text. It can be customized through the "text", "icon", "backgroundColor" and "tooltip" styles, which can all contain TALES expressions.
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
                 xmlns:s="library://ns.adobe.com/flex/spark"
                 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:skins="com.ithaca.timeline.skins.*"
                 creationComplete="creationCompleteHandler(event)">
    <fx:Declarations>
        <!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
    </fx:Declarations>

    <fx:Metadata>[HostComponent("com.ithaca.timeline.ObselSkin")]</fx:Metadata>

    <fx:Script>
        <![CDATA[
            import com.ithaca.traces.Obsel;
            import com.ithaca.timeline.util.SkinUtil;

            import mx.events.PropertyChangeEvent;
            import flash.events.Event;
            import flash.filters.BlurFilter;
            import flash.filters.ColorMatrixFilter;
            import flash.filters.GlowFilter;
            import flash.geom.ColorTransform;
            import mx.graphics.SolidColor;

            public var obsel: Obsel;

            protected function creationCompleteHandler(event: Event):void
            {
                obsel = hostComponent.obsel;
                container.backgroundFill = new SolidColor(hostComponent.getStyle("backgroundColor"));
                obselText.editable = hostComponent.editable;
                hostComponent.dragArea = container;

                obsel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onObselChange);
                onObselChange();
            }

            override public function styleChanged(styleProp: String): void
            {
                super.styleChanged(styleProp);
                onObselChange();
            }

            protected function onObselChange(event: PropertyChangeEvent = null): void
            {
                var st: *;

                if (obsel == null)
                    return;

                st = SkinUtil.interpretStyle(obsel, hostComponent.getStyle("text"));
                if (st)
                    obselText.text     = st;

                st = SkinUtil.interpretStyle(obsel, hostComponent.getStyle("icon"));
                if (st)
                {
                    icon.source = st;
                    // Resize icon if it is obtained through a TALES expression.
                    if (st is String && st.indexOf('http') > -1)
                        icon.height = hostComponent.traceline.height;
                }

                st = SkinUtil.interpretStyle(obsel, hostComponent.getStyle("tooltip"));
                if (st)
                {
                    icon.toolTip = st;
                }

                st = SkinUtil.interpretStyle(obsel, hostComponent.getStyle("backgroundColor"));
                if (st)
                {
                    container.backgroundFill = new SolidColor(st);
                }

                if (hostComponent.getStyle("visible") === false)
                {
                    container.visible = false;
                }
                else
                    container.visible = true;
            }

            protected function onTextChange(event: Event): void
            {
                var a: Array;

                /* Does the tooltip expression look like
                 * ${this/props/foo} or ${obsel/props/foo} (or
                 * with $() syntax) ? */
                a = hostComponent.getStyle("tooltip").match(/^\$[\{\(](this|obsel)\/props\/(.+)[\}\)]$/);
                if (a)
                {
                    obsel.props[a[2]] = obselText.text;
                    onObselChange();
                }
            }
        ]]>
    </fx:Script>

    <s:BorderContainer id="container" cornerRadius="4"  height="25" >
        <s:layout><s:HorizontalLayout gap="2" /> </s:layout>
        <s:Image id="icon" />
        <s:TextInput id="obselText" maxWidth="80"  fontSize="11" contentBackgroundAlpha="0" focusOut="onTextChange(event)" />
    </s:BorderContainer>
</s:Skin>
