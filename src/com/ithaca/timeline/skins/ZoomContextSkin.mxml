<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:timeline="com.ithaca.timeline.*"
				 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:skins="com.ithaca.timeline.skins.*" 
				 width="100%" >	
	
	<fx:Metadata>[HostComponent("com.ithaca.timeline.ZoomContext")]</fx:Metadata>
	
		<fx:Script>
        <![CDATA[            
			import flash.geom.Rectangle;
			import mx.events.ResizeEvent;
            import flash.events.MouseEvent;
			import mx.controls.Image;
			import spark.components.BorderContainer;
			import spark.components.supportClasses.SkinnableComponent;
			
			protected 	var currentCenterDragingPoint:Point;			
			private 	var draggedPart : Group = null;
						            			
			public function get minX() :Number { return timelinePreview.x; }
			public function get maxX() :Number { return timelinePreview.x + timelinePreview.width; }
			
			protected function zcStartDrag(e:MouseEvent):void
			{
				draggedPart = (e.currentTarget as Group);
				stage.addEventListener( MouseEvent.MOUSE_MOVE, 	zcDragging);
				stage.addEventListener( MouseEvent.MOUSE_UP,	zcStopDrag);
					
				currentCenterDragingPoint = new Point(e.localX, e.localY);
			}
			
			protected function zcDragging(e:MouseEvent):void
			{				
				var parentMouse:Point = this.parent.globalToLocal(new Point(e.stageX, e.stageY));
				var newPos : Number = parentMouse.x - currentCenterDragingPoint.x;
				
				switch ( draggedPart.id )
				{
					case "minRange":
						if ( newPos < minX  - minRange.width )						
							minRange.x  = minX  - minRange.width;						
						else if ( newPos + minRange.width > maxRange.x -1 )
							minRange.x =  maxRange.x - minRange.width -1;
						else
							minRange.x = newPos;
							
						cursor.width 	= (maxRange.x + maxRange.width) - minRange.x ;
						cursor.x 		= minRange.x;
					break;
					case "cursor":					
						if ( newPos < minX - minRange.width )						
							cursor.x  = minX  - minRange.width;						
						else if ( newPos + cursor.width  > maxX + maxRange.width )
							cursor.x = maxX - cursor.width + maxRange.width;
						else
							cursor.x = newPos;
							
							minRange.x = cursor.x ;
							maxRange.x = cursor.x + cursor.width - maxRange.width;
					break;
					case "maxRange":
						if ( newPos < cursor.x + minRange.width +1)
							maxRange.x = cursor.x + minRange.width+1;
						else if (newPos > maxX )
							maxRange.x = maxX;
						else
							maxRange.x = newPos ;
							
						cursor.width = maxRange.x + minRange.width - minRange.x;
					break;
					default:
						break;
				}			
			}
			
			protected function zcStopDrag(e:MouseEvent):void
			{
				draggedPart = null;
				hostComponent.updateValuesFromSkinPosition()
				stage.removeEventListener(MouseEvent.MOUSE_MOVE,zcDragging);
				stage.removeEventListener(MouseEvent.MOUSE_UP,zcStopDrag);		
			}
        ]]>
    </fx:Script>
     
	<s:states>
        <s:State name="normal" />
		<s:State name="disabled" />
    </s:states>

	<s:BorderContainer id="zoomContextGroup" width="100%"  backgroundColor="{hostComponent.getStyle('backgroundColor')}" minHeight="1">		
			<timeline:TimeRuler id="timeRuler"  width="100%" startPosition="{timelinePreview.x}" rulerWidth="{timelinePreview.width}" />
			
			<s:VGroup x="4" id="actionsGroup" y="10" gap="4">
				<mx:Button skin="@Embed(source='../images/magnifier.png')"  downSkin="@Embed(source='../images/magnifierClick.png')" click="hostComponent.timeline.setTimeRangeLimits( hostComponent.cursorRange.begin ,hostComponent.cursorRange.end  )"	/>			
				<mx:Button skin="@Embed(source='../images/scissors.png')" 	downSkin="@Embed(source='../images/scissorsClick.png')"  click="hostComponent.timeline.makeTimeHole (hostComponent.cursorRange.begin ,hostComponent.cursorRange.end )"/>			
				<mx:Button skin="@Embed(source='../images/reset.png')" 		downSkin="@Embed(source='../images/resetClick.png')"	click="hostComponent.timeline.resetTimeRangeLimits()"/>			
			</s:VGroup>
		
			<s:Group id="timelinePreview" y="{cursor.y + cursor.height}" right="25" left="30" width="100%"  height="20" resize="timeRuler.redraw(event)">				
				<s:layout><s:VerticalLayout gap="0" ></s:VerticalLayout></s:layout>
			</s:Group>

			<s:Group id="cursor" mouseDown="zcStartDrag(event);" x="40" width="30" y="{timeRuler.y+timeRuler.height}"  height="16" >				
				<s:Rect width="100%" height="100%" y="1">
					<s:fill>
						<s:LinearGradient rotation="90" >
							<s:GradientEntry color="#1E2D91" ratio=".2" />
							<s:GradientEntry color="#121B54" ratio=".4"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				<s:Line y="1"  width="100%"><s:stroke> <s:SolidColorStroke color="black"/></s:stroke></s:Line>	
			</s:Group>
			<s:Group id="minRange"  mouseDown="zcStartDrag(event);" x="{cursor.x}" y="{cursor.y + cursor.height}" >
				<s:Rect width="5"  height="{timelinePreview.height}" >					
					<s:fill>
						<s:LinearGradient rotation="90" >
							<s:GradientEntry color="#121B54" ratio=".4" />
							<s:GradientEntry color="#0E1443" ratio=".8"/>
						</s:LinearGradient>
					</s:fill>					
				</s:Rect>							
			</s:Group>
			<s:Group id="maxRange"  mouseDown="zcStartDrag(event);" x="{cursor.x+ cursor.width-maxRange.width}" y="{cursor.y + cursor.height}" >
				<s:Rect width="5"  height="{timelinePreview.height}" >					
					<s:fill>
						<s:LinearGradient rotation="90" >
							<s:GradientEntry color="#121B54" ratio=".4" />
							<s:GradientEntry color="#0E1443" ratio=".8"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>	
			</s:Group>
	</s:BorderContainer>
</s:Skin>
