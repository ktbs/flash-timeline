<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:timeline="com.ithaca.timeline.*"
				 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:skins="com.ithaca.timeline.skins.*"
				 creationComplete="creationCompleteHandler(event)"
				 width="100%" >	
	
	<fx:Metadata>
		[HostComponent("com.ithaca.timeline.ZoomContext")]
		
		[Style(name = "allowZoom", type = "Boolean", inherit = "no")]	
		[Style(name = "allowCut", type = "Boolean", inherit = "no")]	
	</fx:Metadata>
	
	<fx:Declarations>
		<mx:Button id="zoomButton" skin="@Embed(source='../images/magnifier.png')"  downSkin="@Embed(source='../images/magnifierClick.png')" click="hostComponent.timeline.setTimeRangeLimits( hostComponent.cursorRange.begin ,hostComponent.cursorRange.end  )" mouseOver="CursorIcons.SetButtonCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)"/>
		<mx:Button id="cutButton" skin="@Embed(source='../images/scissors.png')" 	downSkin="@Embed(source='../images/scissorsClick.png')"  click="hostComponent.timeline.makeTimeHole (hostComponent.cursorRange.begin ,hostComponent.cursorRange.end )" mouseOver="CursorIcons.SetButtonCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)"/>
		<mx:Button id="resetButton" skin="@Embed(source='../images/reset.png')" 		downSkin="@Embed(source='../images/resetClick.png')"	click="hostComponent.timeline.resetTimeRangeLimits()" mouseOver="CursorIcons.SetButtonCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)"/>		
	</fx:Declarations>
	
	<fx:Script>
        <![CDATA[
			import flash.events.Event;
			import flash.geom.Rectangle;
			import mx.events.ResizeEvent;
			import mx.events.MoveEvent;
            import flash.events.MouseEvent;
			import mx.controls.Image;
			import spark.components.BorderContainer;
			import spark.components.supportClasses.SkinnableComponent;
			import com.ithaca.timeline.CursorIcons;
			import com.ithaca.timeline.Stylesheet;
			import com.ithaca.timeline.events.TimelineEvent;
			import spark.events.ElementExistenceEvent;
			
			protected 	var currentCenterDragingPoint:Point;			
			private 	var draggedPart : Object = null;
			
			public var allowZoom : Boolean = true;
			public var allowCut  : Boolean = true;
						            			
			public function get minX() :Number { return timelinePreview.x; }
			public function get maxX() :Number { return timelinePreview.x + timelinePreview.width; }
			
			[Bindable]
			protected var  timeRulerSidePadding : Number ;
			
			protected function creationCompleteHandler(event:Event):void
			{
				timeRulerSidePadding = Stylesheet.renderersSidePadding;
				hostComponent.cursorRange.addEventListener( TimelineEvent.TIMERANGES_CHANGE, outputTimeRuler.onTimeRangeChange);		
				hostComponent.cursorRange.addEventListener( TimelineEvent.TIMERANGES_SHIFT, outputTimeRuler.onTimeRangeChange);
				cursor.addEventListener( Event.RESIZE, drawFunnel )  ;				
				cursor.addEventListener( Event.RESIZE, hostComponent.updateValuesFromSkinPosition );
				cursor.addEventListener( MoveEvent.MOVE, drawFunnel )  ;
				cursor.addEventListener( MoveEvent.MOVE, hostComponent.updateValuesFromSkinPosition );
				timelinePreview.addEventListener( Event.RESIZE, outputTimeRuler.redraw );	
				timelinePreview.addEventListener( Event.RESIZE, drawFunnel );
				timelinePreview.addEventListener(ElementExistenceEvent.ELEMENT_ADD, updateCursorHeight );
				timelinePreview.addEventListener(ElementExistenceEvent.ELEMENT_REMOVE, updateCursorHeight );					
			}			
			
			protected function updateCursorHeight (event:Event) : void
			{
				cursor.height = timelinePreview.height + 6;				
			}
			
			
			override public function styleChanged(styleProp:String):void
			{
				super.styleChanged(styleProp);
				
				// Check to see if style changed. 				
				if (!styleProp || styleProp=="allowZoom" || styleProp=="allowCut" )
				{
					allowZoom  = getStyle("allowZoom");
					allowCut  = getStyle("allowCut");	
				
					if (actionsGroup)
					{
						actionsGroup.removeAllElements();
						if ( allowZoom )
							actionsGroup.addElement( zoomButton );
						if ( allowCut )
							actionsGroup.addElement( cutButton );
						if ( allowZoom || allowCut )
							actionsGroup.addElement( resetButton );					
					}
				}			
			}
			
			protected function drawFunnel (event:Event) : void
			{
				var h : Number = funnel.height -1;
				var color : uint = 0x9CD2FE;
				
				funnel.graphics.clear();
				funnel.graphics.lineStyle(1, color);
				funnel.graphics.beginFill( color );
				funnel.graphics.moveTo( cursor.x, 0);				
				funnel.graphics.curveTo( cursor.x , funnel.height * 4/4, outputTimeRuler.startPosition  , h);	
				funnel.graphics.lineTo( cursor.x + cursor.width , h);	
				funnel.graphics.lineTo( cursor.x , 0);		
				funnel.graphics.lineTo( cursor.x + cursor.width, 0);
				funnel.graphics.curveTo(cursor.x + cursor.width , funnel.height * 4/4, outputTimeRuler.startPosition + outputTimeRuler.rulerWidth  , h);
				funnel.graphics.lineTo( cursor.x + cursor.width, h);
				funnel.graphics.endFill();	
				funnel.graphics.lineStyle(1, color);
				funnel.graphics.moveTo( outputTimeRuler.startPosition, h+1);
			}
        ]]>
    </fx:Script>

	<s:states>
        <s:State name="normal" />
		<s:State name="disabled" />
    </s:states>

	<s:BorderContainer id="zoomContextGroup" width="100%"  backgroundColor="{hostComponent.getStyle('backgroundColor')}"  borderVisible="false" minHeight="1">
			<timeline:TimeRuler id="inputTimeRuler"  width="100%" startPosition="{timelinePreview.x}" rulerWidth="{timelinePreview.width}" labelsOnTop="true" />
		
			<s:Group id="timelinePreview" y="{cursor.y+3}" x="{timeRulerSidePadding}"  minHeight="20"   width="{width-timeRulerSidePadding*2}"   resize="inputTimeRuler.redraw(event)">				
				<s:layout><s:VerticalLayout gap="0" ></s:VerticalLayout></s:layout>
			</s:Group>
							
			<s:Group id="funnel" height="15" minHeight="1" y="{cursor.y+cursor.height}" />
			
			<timeline:TimeRuler id="outputTimeRuler"  width="100%" y="{funnel.y+funnel.height}" startPosition="{timelinePreview.x}" rulerWidth="{timelinePreview.width}" />	
			
			<s:VGroup x="4" id="actionsGroup" y="20" gap="4" height="100%" verticalCenter="true" />		
				<skins:ZoomContextCursor id="cursor"  minX="{timelinePreview.x}" maxX="{timelinePreview.x + timelinePreview.width}"  x="40" width="30" y="{inputTimeRuler.y+inputTimeRuler.height}"  height="{timelinePreview.height+6}" />
	</s:BorderContainer>
</s:Skin>
