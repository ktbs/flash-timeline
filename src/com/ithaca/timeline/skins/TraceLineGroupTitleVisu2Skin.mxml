<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:tl="com.ithaca.timeline.*" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" 
				 xmlns:skins="com.ithaca.timeline.skins.*" 
				 creationComplete="creationCompleteHandler(event)"
				 width="100%" height="100%" 
				 dragEnter="dragEnterHandler(event);" dragDrop="dragDropHandler(event);" >
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
			<fx:Array id="filtersSynthesisArray">
				<fx:Object label='{fxgt.gettext("Message")}' type="check" toggled="true" regexpFilter="Message"/>
				<fx:Object label='{fxgt.gettext("Document")}' type="check" toggled="true" regexpFilter="Document"/>
				<fx:Object label='{fxgt.gettext("Instructions")}' type="check" toggled="true" regexpFilter="Instructions"/>
				<fx:Object label='{fxgt.gettext("Keyword")}' type="check" toggled="true" regexpFilter="Keyword"/>
				<fx:Object label='{fxgt.gettext("Marker")}' type="check" toggled="true" regexpFilter="Marker"/>
			</fx:Array>
		
			<fx:Array id="filtersTreeArray">
				<fx:Object label='{fxgt.gettext("Message")}' type="check" toggled="true" name="Messages"/>
				<fx:Object label='{fxgt.gettext("Document")}' type="check" toggled="true" name="Documents"/>
				<fx:Object label='{fxgt.gettext("Instructions")}' type="check" toggled="true" name="Instructions"/>
				<fx:Object label='{fxgt.gettext("Keyword")}' type="check" toggled="true" name="Mots-Clefs"/>
				<fx:Object label='{fxgt.gettext("Marker")}' type="check" toggled="true" name="Marqueurs"/>
			</fx:Array>
	</fx:Declarations>
	
	<fx:Metadata>[HostComponent("com.ithaca.timeline.TraceLineGroupTitle")]</fx:Metadata>
	 
	<fx:Script>
        <![CDATA[
			import com.ithaca.timeline.CursorIcons;
			import com.ithaca.timeline.LayoutNode;
			import com.ithaca.timeline.SelectorRegexp;
			import com.ithaca.timeline.Stylesheet;
			import com.ithaca.timeline.Timeline;
			import com.ithaca.timeline.TraceLine;
			import com.ithaca.timeline.TraceLineGroup;
			import com.ithaca.timeline.TraceLineGroupTitle;
			import com.ithaca.timeline.TraceLineTitle;
			import flash.display.InteractiveObject;
			import flash.events.MouseEvent;
            import mx.controls.Alert;
			import mx.controls.CheckBox;
            import mx.controls.Menu;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.graphics.SolidColor;
			import mx.managers.DragManager;
			
			import gnu.as3.gettext._FxGettext;
			import gnu.as3.gettext.FxGettext;
			[Bindable]
			private var fxgt:_FxGettext;		
			
			[Bindable]
			private var backgroundColor : uint;
			private var filterSynthesisMenu:Menu;
			private var filterTreeMenu:Menu;
    
            private function mouseDownHandler( event:MouseEvent ) : void 
            {                
                var dragInitiator:TraceLineGroupTitle = hostComponent ;
                var ds:DragSource = new DragSource();
                ds.addData(dragInitiator, "traceLineGroup");               
                DragManager.doDrag(dragInitiator, ds, event);
            }
			
			protected function zcStopDrag(e:MouseEvent):void
			{
				CursorIcons.SetDefaultCursor(e);
			}

			// The dragEnter event handler for the Canvas container enables dropping.
            private function dragEnterHandler( event:DragEvent ) : void 
			{				
				if (event.dragSource.hasFormat("traceLineGroup"))
                {
                    DragManager.acceptDragDrop(TraceLineGroupTitleVisu2Skin(event.currentTarget));
                } 				
            }
			
            // The dragDrop event handler for the Canvas container sets the Image control's position by "dropping" it in its new location.
            private function dragDropHandler( event:DragEvent ) : void
			{							
				var tl : Timeline = hostComponent.tlg._timeline as Timeline;
				if ( event.dragInitiator is TraceLineGroupTitle )
					tl.moveTraceLineGroup( tl.getElementIndex( (event.dragInitiator as TraceLineGroupTitle).tlg), tl.getElementIndex(hostComponent.tlg));
            }			
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				fxgt = FxGettext;
				hostComponent.percentWidth = 100;
				contentGroup.top 	= hostComponent.tlg.getStyle("headerHeight");
				contentGroup.bottom = hostComponent.tlg.getStyle("bottom");
				//traceLineGroupTitle.text = hostComponent.tlg.title;
				backgroundColor = hostComponent.tlg.backgroundColor;
				stage.addEventListener( MouseEvent.MOUSE_UP,	zcStopDrag);

                filterSynthesisMenu = new Menu();
                filterSynthesisMenu.variableRowHeight = true;
                filterSynthesisMenu.dataProvider = filtersSynthesisArray;
                filterSynthesisMenu.addEventListener(MenuEvent.CHANGE, filterSynthesisChange);
                filterSynthesisButton.popUp = filterSynthesisMenu;
				
                filterTreeMenu = new Menu();
                filterTreeMenu.variableRowHeight = true;
                filterTreeMenu.dataProvider = filtersTreeArray;
                filterTreeMenu.addEventListener(MenuEvent.CHANGE, filterTreeChange);
                filterTreeButton.popUp = filterTreeMenu;
			}
			
			protected function closeTracelineGroup( ) : void
			{
				(hostComponent.tlg._timeline as Timeline).removeTraceLineGroup( hostComponent.tlg );
			}

			override public function styleChanged(styleProp:String):void
			{
				super.styleChanged(styleProp);

				switch(styleProp)
				{
					case "headerHeight": 
						if ( contentGroup )
							contentGroup.top 	= getStyle("headerHeight");
						invalidateDisplayList();
						break;
					case "bottom": 
						if ( contentGroup )
							contentGroup.bottom	= getStyle("bottom");
						invalidateDisplayList();
						break;
					case "bgColor": 
						tlgContainer.backgroundFill = new SolidColor( getStyle("bgColor") )	;
						invalidateDisplayList();						
						break;
					case "icon": 
						traceLineGroupTitleIcon.source = getStyle("icon");						
						invalidateDisplayList();						
						break;						
					case "title": 			
						traceLineGroupTitle.text = getStyle("title");					
						invalidateDisplayList();
						break;
				}				
								
				if (  !styleProp )
				{
					if (contentGroup )
					{
						contentGroup.top 	= getStyle("headerHeight");
						contentGroup.bottom	= getStyle("bottom");
					}
					backgroundColor		= getStyle("bgColor");
					if (traceLineGroupTitle )
						traceLineGroupTitle.text = getStyle("title");	
					if ( tlgContainer )
						tlgContainer.backgroundFill = new SolidColor( getStyle("bgColor") )	;
					invalidateDisplayList();
				}
			}

            private function filterSynthesisChange(evt:MenuEvent):void
			{
				var selector:String = "##################";
				for each( var filter:Object in filtersSynthesisArray)
				{
					if ( filter.toggled )
					{
						if ( selector == "##################" )
							selector = filter.regexpFilter;
						else
							selector += "|" + filter.regexpFilter;
					}
				}
				(hostComponent.tlg.getElementAt(0) as TraceLine).selector = new SelectorRegexp( selector, "type");
            }
			
            private function filterTreeChange(evt:MenuEvent):void
			{
				var traceLine:TraceLine 			= ((hostComponent.tlg.getElementAt(0) as LayoutNode).GetElementByName( ( evt.item as Object ).name ) as TraceLine );
				if ( traceLine )
				{
					traceLine.SetToVisible( (evt.item as Object ).toggled );
				}
			}

		]]>        
    </fx:Script>
	
	<s:states>
        <s:State name="normal" />
		<s:State name="disabled" />
    </s:states>
	
	<s:BorderContainer id="tlgContainer" width="100%" height="100%" minHeight="1" left="4" right="4" backgroundColor="{backgroundColor}" >
		
		<s:Label id="traceLineGroupTitle" fontSize="11" color="#000000" fontWeight="bold" height="20" width="100%"  x="32" y="5" mouseDown="mouseDownHandler(event)" mouseOver="CursorIcons.SetHandCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)" />
		<mx:Image id="traceLineGroupTitleIcon" height="20" width="20" right="46" top="0"/>
		<mx:PopUpButton id="filterTreeButton" 		openAlways="true" skin="@Embed(source='../images/tree.png')" width="16" top="0" right="30" mouseOver="CursorIcons.SetButtonCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)" />
		<mx:PopUpButton id="filterSynthesisButton" 	openAlways="true" skin="@Embed(source='../images/eye.png')" width="16" top="0" right="14" mouseOver="CursorIcons.SetButtonCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)" />
		<mx:Button  skin="@Embed(source='../images/BlackCross.png')" downSkin="@Embed(source='../images/BlackCrossClick.png')" overSkin="@Embed(source='../images/BlackCrossOver.png')" right="1" top="2" click="closeTracelineGroup()" mouseOver="CursorIcons.SetButtonCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)"/>
		<s:Group id="contentGroup" left="10" right="4" width="100%" />
		
	</s:BorderContainer>
</s:Skin>
