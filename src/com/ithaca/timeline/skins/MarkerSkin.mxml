<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
                 xmlns:s="library://ns.adobe.com/flex/spark"
                 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:skins="com.ithaca.timeline.skins.*"
                 creationComplete="creationCompleteHandler(event)"
                 doubleClick.editable="EditComment(event)">
    <fx:Declarations>
        <!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
    </fx:Declarations>

    <fx:Metadata>[HostComponent("com.ithaca.timeline.ObselSkin")]</fx:Metadata>

    <fx:Script>
        <![CDATA[
            import com.ithaca.traces.Obsel;
            import com.ithaca.tales.Context;
            import flash.filters.BlurFilter;
            import flash.filters.ColorMatrixFilter;
            import flash.filters.GlowFilter;
            import flash.geom.ColorTransform;
            import mx.events.PropertyChangeEvent;
            import mx.events.PropertyChangeEventKind;
            import mx.managers.PopUpManager;
            import mx.events.ToolTipEvent;

            import gnu.as3.gettext._FxGettext;
            import gnu.as3.gettext.FxGettext;
            [Bindable]
            private var fxgt:_FxGettext;

            public var obsel: Obsel;

            protected function creationCompleteHandler(event: Event): void
            {
                fxgt = FxGettext;
                obsel = hostComponent.obsel;
                obsel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onObselChange);
                icon.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, onToolTipShow);

                // Update icon source and tooltip
                onObselChange();

                //if (hostComponent.editable)
                {
                    currentState = 'editable';
                }
            }

            protected function EditComment(e: MouseEvent): void
            {
                this.enabled = false;

                var markerEdit:CommentEditDialog = new CommentEditDialog();

                if (hostComponent.getStyle("tooltipExpression"))
                {
                    var ctx: Context = new Context(obsel);
                    markerEdit.commentText = ctx.evaluate("string:" + hostComponent.getStyle("tooltipExpression"));
                }
                else if (hostComponent.getStyle("tooltipProp"))
                {
                    markerEdit.commentText = obsel.props[hostComponent.getStyle("tooltipProp")];
                }
                markerEdit.title = fxgt.gettext("Comment Edit");

                PopUpManager.addPopUp(markerEdit, this);
                PopUpManager.centerPopUp(markerEdit);
                markerEdit.y -= markerEdit.height;
                markerEdit.addEventListener(Event.REMOVED_FROM_STAGE, onRemoveEditDialog);
            }

            private function onRemoveEditDialog(event: Event): void
            {
                if (event.currentTarget.confirm)
                {
                    if (hostComponent.getStyle("tooltipProp"))
                    {
                        obsel.props[hostComponent.getStyle("tooltipProp")] = event.currentTarget.commentTextInput.text;

                        var propChange: PropertyChangeEvent= new PropertyChangeEvent(PropertyChangeEvent.PROPERTY_CHANGE);
                        propChange.property = "props";
                        obsel.dispatchEvent(propChange);
                        icon.toolTip = event.currentTarget.commentTextInput.text;
                    }
                }
                this.enabled = true;
            }

            override public function styleChanged(styleProp: String): void
            {
                super.styleChanged(styleProp);
                onObselChange();
            }

            protected function onObselChange(event: PropertyChangeEvent = null): void
            {
                var ctx: Context;

                if (obsel == null)
                    return;

                if (hostComponent.getStyle("iconExpression"))
                {
                    ctx = new Context(obsel);
                    ctx.locals['obsel'] = obsel;
                    ctx.locals['trace'] = obsel.trace;
                    icon.height = hostComponent.traceline.height;
                    icon.source = ctx.evaluate("string:" + hostComponent.getStyle("iconExpression"));
                }
                else if (hostComponent.getStyle("icon"))
                {
                    icon.source = hostComponent.getStyle("icon");
                }

                if (hostComponent.getStyle("tooltipExpression"))
                {
                    ctx = new Context(obsel);
                    ctx.locals['obsel'] = obsel;
                    ctx.locals['trace'] = obsel.trace;
                    icon.toolTip = ctx.evaluate("string:" + hostComponent.getStyle("tooltipExpression"));
                }
                else if (hostComponent.getStyle("tooltipProp"))
                {
                    icon.toolTip =  obsel.props[hostComponent.getStyle("tooltipProp")];
                }

                if (hostComponent.getStyle("visible") == 'false')
                {
                    icon.visible = false;
                }
                else
                    icon.visible = true;

            }

            protected function onToolTipShow(event: ToolTipEvent): void
            {
                event.toolTip.text =  icon.toolTip;
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal" />
        <s:State name="editable" />
    </s:states>

    <s:Image id="icon" />

</s:Skin>
