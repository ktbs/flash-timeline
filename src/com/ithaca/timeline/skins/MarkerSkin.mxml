<?xml version="1.0" encoding="utf-8"?>
<!---
This skin displays an Obsel as a marker. It can be customized through the "icon" and the "tooltip" styles, which can both contain TALES expressions.

A marker skin can contain an associated comment, stored as one of its properties. To specify the property name, the tooltip style must have a value of the form "$(this/props/name_of_the_property)".
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
                 xmlns:s="library://ns.adobe.com/flex/spark"
                 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:skins="com.ithaca.timeline.skins.*"
                 creationComplete="creationCompleteHandler(event)"
                 doubleClick.editable="EditComment(event)">
    <fx:Declarations>
        <!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
    </fx:Declarations>

    <fx:Metadata>[HostComponent("com.ithaca.timeline.ObselSkin")]</fx:Metadata>

    <fx:Script>
        <![CDATA[
            import com.ithaca.traces.Obsel;
            import com.ithaca.tales.Context;
            import com.ithaca.timeline.util.SkinUtil;

            import flash.filters.BlurFilter;
            import flash.filters.ColorMatrixFilter;
            import flash.filters.GlowFilter;
            import flash.geom.ColorTransform;
            import mx.events.PropertyChangeEvent;
            import mx.events.PropertyChangeEventKind;
            import mx.managers.PopUpManager;
            import mx.events.ToolTipEvent;

            import gnu.as3.gettext._FxGettext;
            import gnu.as3.gettext.FxGettext;
            [Bindable]
            private var fxgt:_FxGettext;

            public var obsel: Obsel;

            protected function creationCompleteHandler(event: Event): void
            {
                fxgt = FxGettext;
                obsel = hostComponent.obsel;
                obsel.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, onObselChange);
                icon.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, onToolTipShow);
                hostComponent.dragArea = icon;

                // Update icon source and tooltip
                onObselChange();

                //if (hostComponent.editable)
                {
                    currentState = 'editable';
                }
            }

            protected function EditComment(e: MouseEvent): void
            {
                var st: String;

                this.enabled = false;

                var markerEdit:CommentEditDialog = new CommentEditDialog();

                st = SkinUtil.interpretStyle(obsel, hostComponent.getStyle("tooltipExpression"));
                if (st)
                {
                    markerEdit.commentText = st;
                }
                markerEdit.title = fxgt.dgettext("timeline", "Comment Edit");

                PopUpManager.addPopUp(markerEdit, this);
                PopUpManager.centerPopUp(markerEdit);
                markerEdit.y -= markerEdit.height;
                markerEdit.addEventListener(Event.REMOVED_FROM_STAGE, onRemoveEditDialog);
            }

            private function onRemoveEditDialog(event: Event): void
            {
                if (event.currentTarget.confirm)
                {
                    var a: Array;

                    /* Does the tooltip expression look like
                     * ${this/props/foo} or ${obsel/props/foo} (or
                     * with $() syntax) ? */
                    a = hostComponent.getStyle("tooltip").match(/^\$[\{\(](this|obsel)\/props\/(.+)[\}\)]$/);
                    if (a)
                    {
                        obsel.props[a[2]] = event.currentTarget.commentTextInput.text;

                        var propChange: PropertyChangeEvent= new PropertyChangeEvent(PropertyChangeEvent.PROPERTY_CHANGE);
                        propChange.property = "props";
                        obsel.dispatchEvent(propChange);
                        icon.toolTip = event.currentTarget.commentTextInput.text;
                    }
                }
                this.enabled = true;
            }

            override public function styleChanged(styleProp: String): void
            {
                super.styleChanged(styleProp);
                onObselChange();
            }

            protected function onObselChange(event: PropertyChangeEvent = null): void
            {
                var st: * = null;

                if (obsel == null)
                    return;

                st = SkinUtil.interpretStyle(obsel, hostComponent.getStyle("icon"));
                if (st)
                {
                    icon.source = st;
                    // Resize icon if it is obtained through a TALES expression.
                    if (st is String && st.indexOf('http') > -1)
                        icon.height = hostComponent.traceline.height;
                }

                st = SkinUtil.interpretStyle(obsel, hostComponent.getStyle("tooltip"));
                if (st)
                {
                    icon.toolTip = st;
                }

                if (hostComponent.getStyle("visible") === false)
                {
                    icon.visible = false;
                }
                else
                {
                    icon.visible = true;
                }
            }

            protected function onToolTipShow(event: ToolTipEvent): void
            {
                event.toolTip.text =  icon.toolTip;
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal" />
        <s:State name="editable" />
    </s:states>

    <s:Image id="icon" />

</s:Skin>
