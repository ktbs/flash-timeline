<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
        xmlns:s="library://ns.adobe.com/flex/spark"
        xmlns:tl="com.ithaca.timeline.*"
        xmlns:mx="library://ns.adobe.com/flex/mx"
        xmlns:skins="com.ithaca.timeline.skins.*"
        creationComplete="creationCompleteHandler(event)"
        width="100%"
        height="100%"
        elementAdd="onChildrenChange(event)"
        dragDrop="dragDropHandler(event);"
         addedToStage="skin1_addedToStageHandler(event)">

    <fx:Metadata>[HostComponent("com.ithaca.timeline.TraceLineTitle")]</fx:Metadata>

    <fx:Declarations>
        <fx:XML id="menuContent">
            <root>
                <menuitem label='{fxgt.dgettext("timeline", "addTraceLine")}'
                          eventName="newTraceLine" />
                <menuitem type="separator" />
                <menuitem label='{fxgt.dgettext("timeline", "editTraceLine")}'
                          eventName="editTraceLine" />
                <menuitem label='{fxgt.dgettext("timeline", "removeTraceLine")}'
                          eventName="removeTraceLine" />
            </root>
        </fx:XML>
    </fx:Declarations>

    <fx:Script>
        <![CDATA[
            import com.ithaca.timeline.CursorIcons;
            import com.ithaca.timeline.LayoutNode;
            import com.ithaca.timeline.ObselsRenderer;
            import com.ithaca.timeline.SelectorRegexp;
            import com.ithaca.timeline.Timeline;
            import com.ithaca.timeline.TraceLine;
            import com.ithaca.timeline.TraceLineGroup;
            import com.ithaca.timeline.TraceLineTitle;
            import com.ithaca.timeline.ZoomContext;
            import com.ithaca.timeline.events.TimelineEvent;
            import com.ithaca.traces.Obsel;
            import com.ithaca.traces.TraceManager;

            import flash.display.DisplayObject;
            import flash.display.DisplayObjectContainer;
            import flash.display.Graphics;
            import flash.display.Shape;
            import flash.display.Sprite;
            import flash.events.Event;
            import flash.events.MouseEvent;
            import flash.geom.Point;

            import gnu.as3.gettext.FxGettext;
            import gnu.as3.gettext._FxGettext;

            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.controls.Label;
            import mx.controls.Menu;
            import mx.core.DragSource;
            import mx.core.UIComponent;
            import mx.events.CollectionEvent;
            import mx.events.DragEvent;
            import mx.events.FlexEvent;
            import mx.events.MenuEvent;
            import mx.managers.DragManager;
            import mx.managers.PopUpManager;

            import spark.events.ElementExistenceEvent;

            [Bindable]
            private var fxgt: _FxGettext;

            [Bindable]
            public var forme: Shape = new Shape();

            [Bindable]
            public var displayLevel: Number = 0;

            [Bindable]
            public var timeline: Timeline;

            [Bindable]
            public var simpleObselsRenderer: ObselsRenderer;

            private var bStypePropChanged: Boolean;
            private var editMenu: Menu;

            protected function creationCompleteHandler(event: FlexEvent): void
            {
                bStypePropChanged    = false;
                fxgt                 = FxGettext;
                timeline             = hostComponent.tl._timeline;
                traceLineTitle.text = hostComponent.tl.title;
                hostComponent.updateDisplayLevel();
                hostComponent.addEventListener    (ElementExistenceEvent.ELEMENT_ADD ,         onChildrenChange);
                hostComponent.addEventListener    (ElementExistenceEvent.ELEMENT_REMOVE ,     onChildrenChange);
                //    stage.addEventListener(MouseEvent.MOUSE_UP,    zcStopDrag);
                styleChanged(null);
            }

            protected function showMenu(): void
            {
                var position: Point = menuButton.localToGlobal(new Point(menuButton.x, menuButton.y));

                editMenu = Menu.createMenu(this, menuContent, false);
                editMenu.labelField = "@label";
                editMenu.addEventListener(MenuEvent.ITEM_CLICK, menuHandler);

                // FIXME: the Menu.measure function is not available,
                // so we cannot know the menu height in advance
                // (except if we show it first). Use a hardcoded 100 value for now.
                editMenu.show(position.x - 50, Math.min(position.y, root.height - 100));
            }

            protected function zcStopDrag(e: MouseEvent): void
            {
                CursorIcons.SetDefaultCursor(e);
            }

            private function onRemoveTraceLine(evt: Event): void
            {
                if (evt.currentTarget.confirm)
                {
                    var tlParent: LayoutNode = hostComponent.tl.parentNode as LayoutNode;
                    if (tlParent)
                    {
                        for(var i: uint = 0; i < hostComponent.tl.numElements; i++)
                        {
                            var child: LayoutNode = hostComponent.tl.getElementAt(i) as LayoutNode;
                            tlParent.addChildAndTitle(child);
                            if (child is TraceLine)
                                (child as TraceLine).resetObselCollection();
                        }
                        tlParent.removeChildAndTitle(hostComponent.tl);
                    }
                }
            }

            private function onAddTraceLine(evt: Event): void
            {
                if (evt.currentTarget.traceline !== null)
                {
                    timeline.timelineLayout.addTraceline(evt.currentTarget.traceline, hostComponent.tl);
                    // resetObselCollection is called in the onValid
                    // method of the dialod, but since the Traceline is
                    // not yet displayed, it has no effect. Call it here.
                    evt.currentTarget.traceline.resetObselCollection();
                }
            }

            private function menuHandler(evt: MenuEvent): void
            {

                var str: String = evt.item.@eventName;
                switch (str)
                {
                case "newTraceLine":
                    {
                        var newDialog: TraceLineEditDialog = new TraceLineEditDialog();
                        newDialog.setTraceLine(new TraceLine(timeline));
                        PopUpManager.addPopUp(newDialog, timeline, true);
                        PopUpManager.centerPopUp(newDialog);
                        newDialog.addEventListener(Event.REMOVED_FROM_STAGE, onAddTraceLine);
                        break;
                    }
                case "editTraceLine":
                    {
                        var editDialog: TraceLineEditDialog = new TraceLineEditDialog();
                        editDialog.setTraceLine(hostComponent.tl);
                        PopUpManager.addPopUp(editDialog, timeline, true);
                        PopUpManager.centerPopUp(editDialog);
                        break;
                    }
                case "removeTraceLine":
                    {
                        var removeDialog: ConfirmationDialog = new ConfirmationDialog();
                        removeDialog.title = "Do you really want to delete this traceline ?"
                        PopUpManager.addPopUp(removeDialog, this, true);
                        PopUpManager.centerPopUp(removeDialog);
                        removeDialog.addEventListener(Event.REMOVED_FROM_STAGE, onRemoveTraceLine);
                        break;
                    }
                }
            }

            protected function onChildrenChange(event: Event): void
            {
                if (visible)
                {
                    var numTl: Number = hostComponent.tl.getVisibleChildrenNumber();

                    OpenButton.visible = (numTl > 0);
                }
                else
                    OpenButton.visible = false;
            }

            protected function onOpenButtonClick(): void
            {
                if (currentState == "normal")
                {
                    hostComponent.tl.skin.setCurrentState("open");
                    setCurrentState("open");
                    if (timeline.activity !== null)
                        timeline.activity.trace("UnfoldTraceline", { traceline: hostComponent.tl.title });
                }
                else
                {
                    var tlg: TraceLineGroup = hostComponent.tl.getTraceLineGroup();

                    // To avoid that backgroundTraceLine keeps the
                    // previous height, set it to 0 here, and restore it afterwards.
                    if (tlg.backgroundTraceLine)
                        tlg.backgroundTraceLine.height = 0;
                    hostComponent.tl.skin.setCurrentState("normal");
                    setCurrentState("normal");
                    if (timeline.activity !== null)
                        timeline.activity.trace("Foldtraceline", { traceline: hostComponent.tl.title });
                }
            }

            private function mouseDownHandler(event: MouseEvent): void
            {
                var dragInitiator: TraceLineTitle = hostComponent;
                var ds: DragSource = new DragSource();
                ds.addData(dragInitiator, "traceLine");
                DragManager.doDrag(dragInitiator, ds, event);
            }

            private function dragEnterHandler(event: DragEvent): void
            {
                if (event.dragSource.hasFormat("traceLine"))
                {
                    var traceline: TraceLine = (event.dragInitiator as TraceLineTitle).tl;
                    // Check if the dragged element come from the same parent
                    if (traceline.getTraceLineGroup() == hostComponent.tl.getTraceLineGroup() &&
                        (traceline.parentNode == hostComponent.tl.parentNode  || timeline.getStyle("showTraceLineControls") == true))
                        DragManager.acceptDragDrop(UIComponent(event.currentTarget));
                }
            }

            private function dragDropHandler(event: DragEvent): void
            {
                var traceline: TraceLine = (event.dragInitiator as TraceLineTitle).tl;
                if (traceline != hostComponent.tl)
                {
                    if (event.ctrlKey && timeline.getStyle("showTraceLineControls") == true)
                    {
                        timeline.timelineLayout.addTraceline((event.dragInitiator as TraceLineTitle).tl, hostComponent.tl);
                    }
                    else
                    {
                        var toIndex: Number = hostComponent.tl.parentNode.getElementIndex(hostComponent.tl);
                        hostComponent.tl.parentNode.moveTraceline(traceline, toIndex);
                    }
                    (traceline.titleComponent as TraceLineTitle).updateDisplayLevel();
                }
            }

            override public function styleChanged(styleProp: String): void
            {
                super.styleChanged(styleProp);

                if (hostComponent.getStyle("hide") == true)
                {
                    traceLineTitle.height=  titleGroup.height = 0;
                }
                else
                {
                    // Check to see if style changed.
                    if (!styleProp || styleProp=="rendererGap" || styleProp=="rendererHeight" || styleProp=="hide")
                    {
                        titleGroup.height     = (hostComponent.tl.getStyle("rendererGap") as Number) + (hostComponent.tl.getStyle("rendererHeight") as Number);
                        traceLineTitle.height = titleGroup.height;
                        onChildrenChange(null);
                    }
                }

                if (!styleProp || styleProp=="title" || styleProp=="hide")
                {
                    traceLineTitle.text = getStyle("title");
                }

                invalidateDisplayList();
            }
            /**
            * Dispatcher added TraceLineTitle on the stage
            */
            protected function skin1_addedToStageHandler(event: Event): void
            {
                var addTraceLineTitleToStageEvent: TimelineEvent = new TimelineEvent(TimelineEvent.TRACE_LINE_TITLE_ADDED);
                addTraceLineTitleToStageEvent.value = this;
                dispatchEvent(addTraceLineTitleToStageEvent);
            }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal" />
        <s:State name="open" />
        <s:State name="disabled" />
    </s:states>

    <s:VGroup width="100%" gap="0" >
        <s:HGroup id="titleGroup" gap="5" >
            <mx:Spacer id="hierarchicalSpacer" />
            <mx:Image  id="OpenButton" visible="false" source="@Embed(source='../images/iconPlus.png')" source.open="@Embed(source='../images/iconMinus.png')" click="onOpenButtonClick()" mouseOver="CursorIcons.SetButtonCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)"/>
            <s:Label id="traceLineTitle" baselineShift="-4" fontSize="11" mouseDown="mouseDownHandler(event)" dragEnter="dragEnterHandler(event)" dragDrop="dragDropHandler(event)" mouseOver="CursorIcons.SetHandCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)"/>
            <mx:Image id="menuButton"  visible="{timeline.getStyle('showTraceLineControls')}" source="@Embed(source='../images/iconOption_16x16.png')" click="showMenu()" />
        </s:HGroup>

        <s:Group id="contentGroup"  includeIn="open" width="100%" >
            <s:layout><s:VerticalLayout gap="0" /></s:layout>
        </s:Group>

    </s:VGroup>

</s:Skin>
