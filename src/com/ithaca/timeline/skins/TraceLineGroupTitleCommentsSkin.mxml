<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009"
                 xmlns:s="library://ns.adobe.com/flex/spark"
                 xmlns:tl="com.ithaca.timeline.*"
                 xmlns:mx="library://ns.adobe.com/flex/mx"
                 xmlns:skins="com.ithaca.timeline.skins.*"
                 creationComplete="creationCompleteHandler(event)"
                 width="100%" height="100%"
                 dragEnter="dragEnterHandler(event);" dragDrop="dragDropHandler(event);" >
    <fx:Declarations>
        <!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
    </fx:Declarations>
    
    <fx:Metadata>[HostComponent("com.ithaca.timeline.TraceLineGroupTitle")]</fx:Metadata>
    
    <fx:Script>
        <![CDATA[
            import com.ithaca.timeline.CursorIcons;
            import com.ithaca.timeline.Stylesheet;
            import com.ithaca.timeline.Timeline;
            import com.ithaca.timeline.TraceLineGroup;
            import com.ithaca.timeline.TraceLineGroupTitle;
            import com.ithaca.timeline.TraceLineTitle;
            import com.ithaca.traces.Obsel;
            import flash.events.MouseEvent;
            import mx.core.DragSource;
            import mx.events.DragEvent;
            import mx.events.FlexEvent;
            import mx.graphics.SolidColor;
            import mx.managers.DragManager;
            import mx.core.UIComponent;
            
            [Bindable]
            private var backgroundColor : uint;

            private function mouseMoveHandler( event:MouseEvent ) : void
            {
                var dragInitiator:TraceLineGroupTitle = hostComponent ;
                var ds:DragSource = new DragSource();
                ds.addData(dragInitiator, "traceLineGroup");
                DragManager.doDrag(dragInitiator, ds, event);
                stage.removeEventListener(MouseEvent.MOUSE_OUT, CursorIcons.SetDefaultCursor);
            }
            
            // The dragEnter event handler for the Canvas container enables dropping.
            private function dragEnterHandler( event:DragEvent ) : void
            {                
                if (event.dragSource.hasFormat("traceLineGroup"))
                {
                    DragManager.acceptDragDrop( UIComponent(event.currentTarget));
                }                 
            }

            // The dragDrop event handler for the Canvas container sets the Image control's position by "dropping" it in its new location.
            private function dragDropHandler( event:DragEvent ) : void
            {                            
                var tl : Timeline = hostComponent.tlg._timeline as Timeline;
                if ( event.dragInitiator is TraceLineGroupTitle )
                    tl.moveTraceLineGroup( tl.getElementIndex( (event.dragInitiator as TraceLineGroupTitle).tlg), tl.getElementIndex(hostComponent.tlg));
                    
                stage.addEventListener(MouseEvent.MOUSE_OUT, CursorIcons.SetDefaultCursor);
            }            
            
            protected function creationCompleteHandler(event:FlexEvent):void
            {
                hostComponent.percentWidth = 100;
                contentGroup.top     = hostComponent.tlg.getStyle("headerHeight");
                contentGroup.bottom = hostComponent.tlg.getStyle("bottom");
                traceLineGroupTitle.text = hostComponent.tlg.title;
                backgroundColor = hostComponent.tlg.backgroundColor;
            }
            
            protected function closeTracelineGroup( ) : void
            {
                (hostComponent.tlg._timeline as Timeline).removeTraceLineGroup( hostComponent.tlg );
            }

            override public function styleChanged(styleProp:String):void
            {
                super.styleChanged(styleProp);

                if (  !styleProp  || styleProp == "headerHeight" )
                {                    
                    if ( contentGroup )
                        contentGroup.top     = getStyle("headerHeight");
                }
                if (  !styleProp  || styleProp == "bottom" )
                {                    
                    if ( contentGroup )
                        contentGroup.top     = getStyle("bottom");
                }
                if (  !styleProp  || styleProp == "bgColor" )
                {                    
                    tlgContainer.backgroundFill = new SolidColor( getStyle("bgColor") )    ;
                }                
                if (  !styleProp  || styleProp == "icon" )
                {        
                    if ( traceLineGroupTitleIcon )
                        traceLineGroupTitleIcon.source = getStyle("icon");
                }
                if (  !styleProp  || styleProp == "title" )
                {                
                    if ( traceLineGroupTitle )
                        traceLineGroupTitle.text = getStyle("title");    
                }

                invalidateDisplayList();
            }
            
            protected function addCommentObsel() : void
            {                
                hostComponent.tlg.trace.addObsel( new Obsel( "comment",0,null,  hostComponent.tlg._timeline.currentTime, hostComponent.tlg._timeline.currentTime + 20000  ) );
            }
            
        ]]>
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
    
    <s:BorderContainer id="tlgContainer" width="100%" height="100%" minHeight="1" left="4" right="4" backgroundColor="{backgroundColor}" >
        
        <s:Label id="traceLineGroupTitle" fontSize="11" color="#000000" fontWeight="bold" height="20" width="100%"  x="32" y="10" mouseDown="mouseMoveHandler(event)" mouseOver="CursorIcons.SetHandCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)" />
        <mx:Image id="traceLineGroupTitleIcon" source="{getStyle('icon')}" y="5" height="30" width="25" right="14" top="0" click="addCommentObsel()" mouseOver="CursorIcons.SetButtonCursor(event)" mouseOut="CursorIcons.SetDefaultCursor(event)" />
        <!--<mx:Button  skin="@Embed(source='../images/BlackCross.png')" downSkin="@Embed(source='../images/BlackCrossClick.png')" overSkin="@Embed(source='../images/BlackCrossOver.png')" right="1" top="2" click="closeTracelineGroup()" />-->
        <s:Group id="contentGroup" left="10" right="4" width="100%" />
        
    </s:BorderContainer>
</s:Skin>
